{"ts":1364361880073,"silentsave":true,"restoring":false,"patch":[[]],"length":0}
{"contributors":[],"silentsave":false,"ts":1364362195348,"patch":[[{"diffs":[[1,"\r\n(function(){\r\n\r\n  var Renderer = function(canvas){\r\n    var canvas = $(canvas).get(0)\r\n    var ctx = canvas.getContext(\"2d\");\r\n    var particleSystem\r\n\r\n    var that = {\r\n      init:function(system){\r\n        //\r\n        // the particle system will call the init function once, right before the\r\n        // first frame is to be drawn. it's a good place to set up the canvas and\r\n        // to pass the canvas size to the particle system\r\n        //\r\n        // save a reference to the particle system for use in the .redraw() loop\r\n        particleSystem = system\r\n\r\n        // inform the system of the screen dimensions so it can map coords for us.\r\n        // if the canvas is ever resized, screenSize should be called again with\r\n        // the new dimensions\r\n        particleSystem.screenSize(canvas.width, canvas.height) \r\n        particleSystem.screenPadding(80) // leave an extra 80px of whitespace per side\r\n        \r\n        // set up some event handlers to allow for node-dragging\r\n        that.initMouseHandling()\r\n      },\r\n      \r\n      redraw:function(){\r\n        // \r\n        // redraw will be called repeatedly during the run whenever the node positions\r\n        // change. the new positions for the nodes can be accessed by looking at the\r\n        // .p attribute of a given node. however the p.x & p.y values are in the coordinates\r\n        // of the particle system rather than the screen. you can either map them to\r\n        // the screen yourself, or use the convenience iterators .eachNode (and .eachEdge)\r\n        // which allow you to step through the actual node objects but also pass an\r\n        // x,y point in the screen's coordinate system\r\n        // \r\n        ctx.fillStyle = \"white\"\r\n        ctx.fillRect(0,0, canvas.width, canvas.height)\r\n        \r\n        particleSystem.eachEdge(function(edge, pt1, pt2){\r\n          // edge: {source:Node, target:Node, length:#, data:{}}\r\n          // pt1:  {x:#, y:#}  source position in screen coords\r\n          // pt2:  {x:#, y:#}  target position in screen coords\r\n\r\n          // draw a line from pt1 to pt2\r\n          ctx.strokeStyle = \"rgba(0,0,0, .333)\"\r\n          ctx.lineWidth = 1\r\n          ctx.beginPath()\r\n          ctx.moveTo(pt1.x, pt1.y)\r\n          ctx.lineTo(pt2.x, pt2.y)\r\n          ctx.stroke()\r\n        })\r\n\r\n        particleSystem.eachNode(function(node, pt){\r\n          // node: {mass:#, p:{x,y}, name:\"\", data:{}}\r\n          // pt:   {x:#, y:#}  node position in screen coords\r\n\r\n          // draw a rectangle centered at pt\r\n          var w = 10\r\n          ctx.fillStyle = (node.data.alone) ? \"orange\" : \"black\"\r\n          ctx.fillRect(pt.x-w/2, pt.y-w/2, w,w)\r\n        })        \t\t\r\n      },\r\n      \r\n      initMouseHandling:function(){\r\n        // no-nonsense drag and drop (thanks springy.js)\r\n        var dragged = null;\r\n\r\n        // set up a handler object that will initially listen for mousedowns then\r\n        // for moves and mouseups while dragging\r\n        var handler = {\r\n          clicked:function(e){\r\n            var pos = $(canvas).offset();\r\n            _mouseP = arbor.Point(e.pageX-pos.left, e.pageY-pos.top)\r\n            dragged = particleSystem.nearest(_mouseP);\r\n\r\n            if (dragged && dragged.node !== null){\r\n              // while we're dragging, don't let physics move the node\r\n              dragged.node.fixed = true\r\n            }\r\n\r\n            $(canvas).bind('mousemove', handler.dragged)\r\n            $(window).bind('mouseup', handler.dropped)\r\n\r\n            return false\r\n          },\r\n          dragged:function(e){\r\n            var pos = $(canvas).offset();\r\n            var s = arbor.Point(e.pageX-pos.left, e.pageY-pos.top)\r\n\r\n            if (dragged && dragged.node !== null){\r\n              var p = particleSystem.fromScreen(s)\r\n              dragged.node.p = p\r\n            }\r\n\r\n            return false\r\n          },\r\n\r\n          dropped:function(e){\r\n            if (dragged===null || dragged.node===undefined) return\r\n            if (dragged.node !== null) dragged.node.fixed = false\r\n            dragged.node.tempMass = 1000\r\n            dragged = null\r\n            $(canvas).unbind('mousemove', handler.dragged)\r\n            $(window).unbind('mouseup', handler.dropped)\r\n            _mouseP = null\r\n            return false\r\n          }\r\n        }\r\n        \r\n        // start listening\r\n        $(canvas).mousedown(handler.clicked);\r\n\r\n      },\r\n      \r\n    }\r\n    return that\r\n  }    \r\n\r\n  $(document).ready(function(){\r\n    var sys = arbor.ParticleSystem(1000, 600, 0.5) // create the system with sensible repulsion/stiffness/friction\r\n    sys.parameters({gravity:true}) // use center-gravity to make the graph settle nicely (ymmv)\r\n    sys.renderer = Renderer(\"#viewport\") // our newly created renderer will have its .init() method called shortly by sys...\r\n\r\n    // add some nodes to the graph and watch it go...\r\n    sys.addEdge('a','b')\r\n    sys.addEdge('a','c')\r\n    sys.addEdge('a','d')\r\n    sys.addEdge('a','e')\r\n    sys.addNode('f', {alone:true, mass:.25})\r\n\r\n    // or, equivalently:\r\n    //\r\n    // sys.graft({\r\n    //   nodes:{\r\n    //     f:{alone:true, mass:.25}\r\n    //   }, \r\n    //   edges:{\r\n    //     a:{ b:{},\r\n    //         c:{},\r\n    //         d:{},\r\n    //         e:{}\r\n    //     }\r\n    //   }\r\n    // })\r\n    \r\n  })\r\n\r\n})()"]],"start1":0,"start2":0,"length1":0,"length2":5300}]],"length":5300,"saved":false}
{"ts":1364362280056,"patch":[[{"diffs":[[0,"){\r\n\r\n  "],[-1,"var "],[1,"  _"],[0,"Renderer"]],"start1":12,"start2":12,"length1":20,"length2":19}]],"length":5299,"saved":false}
{"ts":1364362341787,"patch":[[{"diffs":[[0,"\r\n\r\n    "],[-1,"_"],[0,"Renderer"]],"start1":14,"start2":14,"length1":17,"length2":16}]],"length":5298,"saved":false}
{"contributors":[],"silentsave":false,"ts":1364365481632,"patch":[[{"diffs":[[-1,"\r\n"],[0,"(functio"]],"start1":0,"start2":0,"length1":10,"length2":8},{"diffs":[[0,"ion(){\r\n"],[-1,"\r\n"],[0,"  "],[1,"\r\n"],[0,"  Render"]],"start1":6,"start2":6,"length1":20,"length2":20},{"diffs":[[0,"var "],[-1,"particleSystem\r\n\r\n    var that = {\r\n      init:function(system){\r\n        //\r\n        // the"],[1,"gfx = arbor.Graphics(canvas)\r\n    var"],[0," par"]],"start1":129,"start2":129,"length1":100,"length2":45},{"diffs":[[0,"icle"],[-1," s"],[1,"S"],[0,"ystem "],[-1,"will call the init function once, right before the\r\n        // first frame is to be drawn. it's a good place to set up the canvas and\r\n        // to pass the canvas size to the particle system\r\n        //\r\n        // save a reference to the particle system for use in the .redraw() loop\r\n        particleSystem = system\r\n\r\n        // inform the system of the screen dimensions so it can map coords for us.\r\n        // if the canvas is ever resized, screenSize should be called again with\r\n        // the new dimensions"],[1,"= null\r\n\r\n    var that = {\r\n      init:function(system){\r\n        particleSystem = system"],[0,"\r\n  "]],"start1":175,"start2":175,"length1":534,"length2":104},{"diffs":[[0,"ing("],[-1,"80) // leave an extra 80px of whitespace per side\r\n        \r\n        // set up some event handlers to allow for node-dragging"],[1,"40)\r\n"],[0,"\r\n  "]],"start1":375,"start2":375,"length1":133,"length2":13},{"diffs":[[0,"ng()\r\n      },\r\n"],[-1,"      "],[1,""],[0,"\r\n      redraw:f"]],"start1":414,"start2":414,"length1":38,"length2":32},{"diffs":[[0,"    "],[-1,"// \r\n        // redraw will be called repeatedly during the run whenever the "],[1,"if (!particleSystem) return\r\n\r\n        gfx.clear() // convenience Æ’: clears the whole canvas rect\r\n\r\n        // draw the nodes & save their bounds for edge drawing\r\n        var nodeBoxes = {}\r\n        particleSystem.eachNode(function("],[0,"node"],[1,","],[0," p"],[-1,"ositions\r\n"],[1,"t){\r\n  "],[0,"    "]],"start1":462,"start2":462,"length1":101,"length2":256},{"diffs":[[0," // "],[-1,"change. the new positions for the nodes can be accessed by looking at the\r\n        // .p attribute of a given node. however the p.x & p.y values are in the coordinates\r\n        // of the particle system rather than the screen. you can either map them to\r\n        // the screen yourself, or use the convenience iterators .eachNode (and .eachEdge)"],[1,"node: {mass:#, p:{x,y}, name:\"\", data:{}}\r\n          // pt:   {x:#, y:#}  node position in screen coords\r\n\r\n          // determine the box size and round off the coords if we'll be \r\n          // drawing a text label (awful alignment jitter otherwise...)\r\n          var label = node.data.label||\"\"\r\n          var w = ctx.measureText(\"\"+label).width + 10\r\n          if (!(\"\"+label).match(/^[ \\t]*$/)){\r\n            pt.x = Math.floor(pt.x)\r\n            pt.y = Math.floor(pt.y)\r\n          }else{\r\n            label = null\r\n          }\r\n\r\n          // draw a rectangle centered at pt\r\n          if (node.data.color) ctx.fillStyle = node.data.color\r\n          else ctx.fillStyle = \"rgba(0,0,0,.2)\"\r\n          if (node.data.color=='none') ctx.fillStyle = \"white\"\r\n\r\n          if (node.data.shape=='dot'){"],[0,"\r\n  "]],"start1":721,"start2":721,"length1":353,"length2":806},{"diffs":[[0,"    "],[-1,"// which allow you to step through the actual node objects but also pass an\r\n        // x,y point in the screen's coordinate system\r\n        // \r\n"],[1,"    gfx.oval(pt.x-w/2, pt.y-w/2, w,w, {fill:ctx.fillStyle})\r\n            nodeBoxes[node.name] = [pt.x-w/2, pt.y-w/2, w,w]\r\n          }else{\r\n            gfx.rect(pt.x-w/2, pt.y-10, w,20, 4, {fill:ctx.fillStyle})\r\n            nodeBoxes[node.name] = [pt.x-w/2, pt.y-11, w, 22]\r\n          }\r\n\r\n          // draw the text\r\n          if (label){\r\n            ctx.font = \"12px Helvetica\"\r\n            ctx.textAlign = \"center\"\r\n    "],[0,"    "]],"start1":1529,"start2":1529,"length1":154,"length2":433},{"diffs":[[0,"    "],[-1,"ctx.fillRect(0,0, canvas.width, canvas.height)\r\n        "],[1,"    if (node.data.color=='none') ctx.fillStyle = '#333333'\r\n            ctx.fillText(label||\"\", pt.x, pt.y+4)\r\n            ctx.fillText(label||\"\", pt.x, pt.y+4)\r\n          }\r\n        })        \t\t\r\n\r\n\r\n        // draw the edges"],[0,"\r\n  "]],"start1":1995,"start2":1995,"length1":64,"length2":234},{"diffs":[[0,"    "],[-1,"// draw a line from pt1 to pt2\r\n          ctx.strokeStyle = \"rgba(0,0,0, .333)\"\r\n          ctx.lineWidth ="],[1,"var weight = edge.data.weight\r\n          var color = edge.data.color\r\n\r\n          if (!color || (\"\"+color).match(/^[ \\t]*$/)) color = null\r\n\r\n          // find the start point\r\n          var tail = intersect_line_box(pt1, pt2, nodeBoxes[edge.source.name])\r\n          var head = intersect_line_box(tail, pt2, nodeBoxes[edge.target.name])\r\n\r\n          ctx.save() \r\n            ctx.beginPath()\r\n            ctx.lineWidth = (!isNaN(weight)) ? parseFloat(weight) :"],[0," 1\r\n"],[1,"  "],[0,"    "]],"start1":2490,"start2":2490,"length1":118,"length2":473},{"diffs":[[0,"        ctx."],[-1,"beginPath()\r\n"],[1,"strokeStyle = (color) ? color : \"#cccccc\"\r\n            ctx.fillStyle = null\r\n\r\n  "],[0,"          ct"]],"start1":2961,"start2":2961,"length1":37,"length2":105},{"diffs":[[0,"eTo("],[-1,"pt1.x, pt1"],[1,"tail.x, tail"],[0,".y)\r"]],"start1":3071,"start2":3071,"length1":18,"length2":20},{"diffs":[[0,"l.y)\r\n          "],[1,"  "],[0,"ctx.lineTo(pt2.x"]],"start1":3086,"start2":3086,"length1":32,"length2":34},{"diffs":[[0,"eTo("],[-1,"pt2.x, pt2"],[1,"head.x, head"],[0,".y)\r\n"],[1,"  "],[0,"    "]],"start1":3111,"start2":3111,"length1":23,"length2":27},{"diffs":[[0,"    "],[-1,"})\r\n\r\n        particleSystem.eachNode(function(node, pt){\r\n          // node: {mass:#, p:{x,y}, name:\"\", data:{}}\r\n          // pt:   {x:#, y:#}  node position in screen coords\r\n\r\n          // draw a rectangle centered at pt\r\n          var w = 10\r\n          ctx.fillStyle = (node.data.alone) ? \"orange\" : \"black\"\r\n          ctx.fillRect(pt.x-w/2, pt.y-w/2, w,w"],[1,"  ctx.restore()\r\n\r\n          // draw an arrowhead if this is a -> style edge\r\n          if (edge.data.directed){\r\n            ctx.save()\r\n              // move to the head position of the edge we just drew\r\n              var wt = !isNaN(weight) ? parseFloat(weight) : 1\r\n              var arrowLength = 6 + wt\r\n              var arrowWidth = 2 + wt\r\n              ctx.fillStyle = (color) ? color : \"#cccccc\"\r\n              ctx.translate(head.x, head.y);\r\n              ctx.rotate(Math.atan2(head.y - tail.y, head.x - tail.x));\r\n\r\n              // delete some of the edge that's already there (so the point isn't hidden)\r\n              ctx.clearRect(-arrowLength/2,-wt/2, arrowLength/2,wt)\r\n\r\n              // draw the chevron\r\n              ctx.beginPath();\r\n              ctx.moveTo(-arrowLength, arrowWidth);\r\n              ctx.lineTo(0, 0);\r\n              ctx.lineTo(-arrowLength, -arrowWidth);\r\n              ctx.lineTo(-arrowLength * 0.8, -0);\r\n              ctx.closePath();\r\n              ctx.fill();\r\n            ctx.restore("],[0,")\r\n "]],"start1":3162,"start2":3162,"length1":368,"length2":1041},{"diffs":[[0,"        "],[-1,"})"],[1,"  }\r\n"],[0,"        "],[-1,"\t\t"],[1,"})\r\n\r\n\r\n"],[0,"\r\n      "]],"start1":4202,"start2":4202,"length1":28,"length2":37},{"diffs":[[0,"\r\n      },\r\n"],[-1,"      \r\n"],[0,"      initMo"]],"start1":4231,"start2":4231,"length1":32,"length2":24},{"diffs":[[0,"pringy.js)\r\n"],[1,"        selected = null;\r\n        nearest = null;\r\n"],[0,"        var "]],"start1":4326,"start2":4326,"length1":24,"length2":75},{"diffs":[[0,"= null;\r"],[1,"\n        var oldmass = 1\r"],[0,"\n\r\n     "]],"start1":4409,"start2":4409,"length1":16,"length2":41},{"diffs":[[0,"op)\r\n           "],[1," selected = nearest ="],[0," dragged = parti"]],"start1":4743,"start2":4743,"length1":32,"length2":53},{"diffs":[[0," if (dragged"],[-1," && dragged"],[0,".node !== nu"]],"start1":4838,"start2":4838,"length1":35,"length2":24},{"diffs":[[0,"ull)"],[-1,"{\r\n              // while we're dragging, don't let physics move the node\r\n             "],[0," dra"]],"start1":4861,"start2":4861,"length1":96,"length2":8},{"diffs":[[0," = true\r"],[-1,"\n            }\r"],[0,"\n\r\n     "]],"start1":4884,"start2":4884,"length1":31,"length2":16},{"diffs":[[0,"d:function(e){\r\n"],[1,"            var old_nearest = nearest && nearest.node._id\r\n"],[0,"            var "]],"start1":5067,"start2":5067,"length1":32,"length2":91},{"diffs":[[0,"    if ("],[-1,"dragged"],[1,"!nearest) return\r\n            if (dragged !== null"],[0," && drag"]],"start1":5263,"start2":5263,"length1":23,"length2":66},{"diffs":[[0,"pMass = "],[-1,"100"],[1,"5"],[0,"0\r\n     "]],"start1":5690,"start2":5690,"length1":19,"length2":17},{"diffs":[[0,"dragged = null\r\n"],[1,"            selected = null\r\n"],[0,"            $(ca"]],"start1":5714,"start2":5714,"length1":32,"length2":61},{"diffs":[[0," }\r\n"],[-1,"        \r\n        // start listening\r\n"],[0,"    "]],"start1":5951,"start2":5951,"length1":46,"length2":8},{"diffs":[[0,"\n      }"],[-1,","],[0,"\r\n"],[-1,"      "],[0,"\r\n    }\r"]],"start1":6003,"start2":6003,"length1":25,"length2":18},{"diffs":[[0," }\r\n"],[-1,"    return that"],[1,"\r\n    // helpers for figuring out where to draw arrows (thanks springy.js)"],[0,"\r\n  "],[-1,"}"],[0,"  "],[-1,"  \r\n\r\n  $(document).ready(function()"],[1,"var intersect_line_line = function(p1, p2, p3, p4)\r\n    "],[0,"{\r\n    "],[1,"  "],[0,"var "],[-1,"sys = arbor.ParticleSystem(1000, 600, 0.5) // create the system with sensible repulsion/stiffness/friction\r\n    sys.parameters({gravity:true}) // use center-gravity to make the graph settle nicely (ymmv)\r\n    sys.renderer = Renderer(\"#viewport\") // our newly created renderer will have its .init() method called shortly by sys...\r\n\r\n    // add some nodes to the graph and watch it go...\r\n    sys.addEdge('a','b')\r\n    sys.addEdge('a','c')\r\n    sys.addEdge('a','d')\r\n    sys.addEdge('a','e')\r\n    sys.addNode('f', {alone:true, mass:.25})\r\n\r\n    // or, equivalently:\r\n    //\r\n    // sys.graft({\r\n    //   nodes:{\r\n    //     f:{alone:true, mass:.25}\r\n    //   }, \r\n    //   edges:{\r\n    //     a:{ b:{},"],[1,"denom = ((p4.y - p3.y)*(p2.x - p1.x) - (p4.x - p3.x)*(p2.y - p1.y));\r\n      if (denom === 0) return false // lines are parallel\r\n      var ua = ((p4.x - p3.x)*(p1.y - p3.y) - (p4.y - p3.y)*(p1.x - p3.x)) / denom;\r\n      var ub = ((p2.x - p1.x)*(p1.y - p3.y) - (p2.y - p1.y)*(p1.x - p3.x)) / denom;\r\n\r\n      if (ua < 0 || ua > 1 || ub < 0 || ub > 1)  return false\r\n      return arbor.Point(p1.x + ua * (p2.x - p1.x), p1.y + ua * (p2.y - p1.y));\r\n    }\r\n\r\n    var intersect_line_box = function(p1, p2, boxTuple)\r\n    {\r\n      var p3 = {x:boxTuple[0], y:boxTuple[1]},\r\n          w = boxTuple[2],\r\n          h = boxTuple[3]\r\n\r\n      var tl = {x: p3.x, y: p3.y};\r\n      var tr = {x: p3.x + w, y: p3.y};\r\n      var bl = {x: p3.x, y: p3.y + h};\r\n      var br = {x: p3.x + w, y: p3.y + h};\r\n\r\n      return intersect_line_line(p1, p2, tl, tr) ||"],[0,"\r\n    "],[-1,"//"],[0,"        "],[-1," c:{},"],[1,"intersect_line_line(p1, p2, tr, br) ||"],[0,"\r\n    "],[-1,"//"],[0,"        "],[-1," d:{},"],[1,"intersect_line_line(p1, p2, br, bl) ||"],[0,"\r\n    "],[-1,"//"],[0,"        "],[-1," e:{}\r\n    //"],[1,"intersect_line_line(p1, p2, bl, tl) ||\r\n"],[0,"     "],[-1,"}\r\n"],[0,"    "],[-1,"//"],[0,"   "],[-1,"}\r\n    // })\r\n    \r\n  })\r\n"],[1,"false\r\n    }\r\n\r\n    return that\r\n  }    \r\n  "],[0,"\r\n})"]],"start1":6018,"start2":6018,"length1":894,"length2":1207}]],"length":7227,"saved":false}
{"contributors":[],"silentsave":false,"ts":1364377301997,"patch":[[{"diffs":[[0,"on()"],[-1,"{\r\n  \r\n  Renderer = function(canvas){\r\n    var canvas = $(canvas).get(0)\r\n    var ctx = canvas.getContext(\"2d\");\r\n    var gfx = arbor.Graphics(canvas)\r\n    var particleSystem = null\r\n\r\n    var that = {\r\n      init:function(system){\r\n        particleSystem = system\r\n        particleSystem.screenSize(canvas.width, canvas.height) \r\n        particleSystem.screenPadding(40)\r\n\r\n        that.initMouseHandling()\r\n      },\r\n\r\n      redraw:function(){\r\n        if (!particleSystem) return\r\n\r\n        gfx.clear() // convenience Æ’: clears the whole canvas rect\r\n\r\n        // draw the nodes & save their bounds for edge drawing\r\n        var nodeBoxes = {}\r\n        particleSystem.eachNode(function(node, pt){\r\n          // node: {mass:#, p:{x,y}, name:\"\", data:{}}\r\n          // pt:   {x:#, y:#}  node position in screen coords\r\n\r\n          // determine the box size and round off the coords if we'll be \r\n          // drawing a text label (awful alignment jitter otherwise...)\r\n          var label = node.data.label||\"\"\r\n          var w = ctx.measureText(\"\"+label).width + 10\r\n          if (!(\"\"+label).match(/^[ \\t]*$/)){\r\n            pt.x = Math.floor(pt.x)\r\n            pt.y = Math.floor(pt.y)\r\n          }else{\r\n            label = null\r\n          }\r\n\r\n          // draw a rectangle centered at pt\r\n          if (node.data.color) ctx.fillStyle = node.data.color\r\n          else ctx.fillStyle = \"rgba(0,0,0,.2)\"\r\n          if (node.data.color=='none') ctx.fillStyle = \"white\"\r\n\r\n          if (node.data.shape=='dot'){\r\n            gfx.oval(pt.x-w/2, pt.y-w/2, w,w, {fill:ctx.fillStyle})\r\n            nodeBoxes[node.name] = [pt.x-w/2, pt.y-w/2, w,w]\r\n          }else{\r\n            gfx.rect(pt.x-w/2, pt.y-10, w,20, 4, {fill:ctx.fillStyle})\r\n            nodeBoxes[node.name] = [pt.x-w/2, pt.y-11, w, 22]\r\n          }\r\n\r\n          // draw the text\r\n          if (label){\r\n            ctx.font = \"12px Helvetica\"\r\n            ctx.textAlign = \"center\"\r\n            ctx.fillStyle = \"white\"\r\n            if (node.data.color=='none') ctx.fillStyle = '#333333'\r\n            ctx.fillText(label||\"\", pt.x, pt.y+4)\r\n            ctx.fillText(label||\"\", pt.x, pt.y+4)\r\n          }\r\n        })        \t\t\r\n\r\n\r\n        // draw the edges\r\n        particleSystem.eachEdge(function(edge, pt1, pt2){\r\n          // edge: {source:Node, target:Node, length:#, data:{}}\r\n          // pt1:  {x:#, y:#}  source position in screen coords\r\n          // pt2:  {x:#, y:#}  target position in screen coords\r\n\r\n          var weight = edge.data.weight\r\n          var color = edge.data.color\r\n\r\n          if (!color || (\"\"+color).match(/^[ \\t]*$/)) color = null\r\n\r\n          // find the start point\r\n          var tail = intersect_line_box(pt1, pt2, nodeBoxes[edge.source.name])\r\n          var head = intersect_line_box(tail, pt2, nodeBoxes[edge.target.name])\r\n\r\n          ctx.save() \r\n            ctx.beginPath()\r\n            ctx.lineWidth = (!isNaN(weight)) ? parseFloat(weight) : 1\r\n            ctx.strokeStyle = (color) ? color : \"#cccccc\"\r\n            ctx.fillStyle = null\r\n\r\n            ctx.moveTo(tail.x, tail.y)\r\n            ctx.lineTo(head.x, head.y)\r\n            ctx.stroke()\r\n          ctx.restore()\r\n\r\n          // draw an arrowhead if this is a -> style edge\r\n          if (edge.data.directed){\r\n            ctx.save()\r\n              // move to the head position of the edge we just drew\r\n              var wt = !isNaN(weight) ? parseFloat(weight) : 1\r\n              var arrowLength = 6 + wt\r\n              var arrowWidth = 2 + wt\r\n              ctx.fillStyle = (color) ? color : \"#cccccc\"\r\n              ctx.translate(head.x, head.y);\r\n              ctx.rotate(Math.atan2(head.y - tail.y, head.x - tail.x));\r\n\r\n              // delete some of the edge that's already there (so the point isn't hidden)\r\n              ctx.clearRect(-arrowLength/2,-wt/2, arrowLength/2,wt)\r\n\r\n              // draw the chevron\r\n              ctx.beginPath();\r\n              ctx.moveTo(-arrowLength, arrowWidth);\r\n              ctx.lineTo(0, 0);\r\n              ctx.lineTo(-arrowLength, -arrowWidth);\r\n              ctx.lineTo(-arrowLength * 0.8, -0);\r\n              ctx.closePath();\r\n              ctx.fill();\r\n            ctx.restore()\r\n          }\r\n        })\r\n\r\n\r\n\r\n      },\r\n      initMouseHandling:function(){\r\n        // no-nonsense drag and drop (thanks springy.js)\r\n        selected = null;\r\n        nearest = null;\r\n        var dragged = null;\r\n        var oldmass = 1\r\n\r\n        // set up a handler object that will initially listen for mousedowns then\r\n        // for moves and mouseups while dragging\r\n        var handler = {\r\n          clicked:function(e){\r\n            var pos = $(canvas).offset();\r\n            _mouseP = arbor.Point(e.pageX-pos.left, e.pageY-pos.top)\r\n            selected = nearest = dragged = particleSystem.nearest(_mouseP);\r\n\r\n            if (dragged.node !== null) dragged.node.fixed = true\r\n\r\n            $(canvas).bind('mousemove', handler.dragged)\r\n            $(window).bind('mouseup', handler.dropped)\r\n\r\n            return false\r\n          },\r\n          dragged:function(e){\r\n            var old_nearest = nearest && nearest.node._id\r\n            var pos = $(canvas).offset();\r\n            var s = arbor.Point(e.pageX-pos.left, e.pageY-pos.top)\r\n\r\n            if (!nearest) return\r\n            if (dragged !== null && dragged.node !== null){\r\n              var p = particleSystem.fromScreen(s)\r\n              dragged.node.p = p\r\n            }\r\n\r\n            return false\r\n          },\r\n\r\n          dropped:function(e){\r\n            if (dragged===null || dragged.node===undefined) return\r\n            if (dragged.node !== null) dragged.node.fixed = false\r\n            dragged.node.tempMass = 50\r\n            dragged = null\r\n            selected = null\r\n            $(canvas).unbind('mousemove', handler.dragged)\r\n            $(window).unbind('mouseup', handler.dropped)\r\n            _mouseP = null\r\n            return false\r\n          }\r\n        }\r\n        $(canvas).mousedown(handler.clicked);\r\n\r\n      }\r\n\r\n    }\r\n\r\n    // helpers for figuring out where to draw arrows (thanks springy.js)\r\n    var intersect_line_line = function(p1, p2, p3, p4)\r\n    {\r\n      var denom = ((p4.y - p3.y)*(p2.x - p1.x) - (p4.x - p3.x)*(p2.y - p1.y));\r\n      if (denom === 0) return false // lines are parallel\r\n      var ua = ((p4.x - p3.x)*(p1.y - p3.y) - (p4.y - p3.y)*(p1.x - p3.x)) / denom;\r\n      var ub = ((p2.x - p1.x)*(p1.y - p3.y) - (p2.y - p1.y)*(p1.x - p3.x)) / denom;\r\n\r\n      if (ua < 0 || ua > 1 || ub < 0 || ub > 1)  return false\r\n      return arbor.Point(p1.x + ua * (p2.x - p1.x), p1.y + ua * (p2.y - p1.y));\r\n    }\r\n\r\n    var intersect_line_box = function(p1, p2, boxTuple)\r\n    {\r\n      var p3 = {x:boxTuple[0], y:boxTuple[1]},\r\n          w = boxTuple[2],\r\n          h = boxTuple[3]\r\n\r\n      var tl = {x: p3.x, y: p3.y};\r\n      var tr = {x: p3.x + w, y: p3.y};\r\n      var bl = {x: p3.x, y: p3.y + h};\r\n      var br = {x: p3.x + w, y: p3.y + h};\r\n\r\n      return intersect_line_line(p1, p2, tl, tr) ||\r\n            intersect_line_line(p1, p2, tr, br) ||\r\n            intersect_line_line(p1, p2, br, bl) ||\r\n            intersect_line_line(p1, p2, bl, tl) ||\r\n            false\r\n    }\r\n\r\n    return that\r\n  }    \r\n  \r"],[1," {\n\n    Renderer = function(canvas) {\n        var canvas = $(canvas).get(0)\n        var ctx = canvas.getContext(\"2d\");\n        var gfx = arbor.Graphics(canvas)\n        var particleSystem = null\n\n        var that = {\n            init: function(system) {\n                particleSystem = system\n                particleSystem.screenSize(canvas.width, canvas.height)\n                particleSystem.screenPadding(40)\n\n                that.initMouseHandling()\n            },\n\n            redraw: function() {\n                if (!particleSystem) return\n\n                 ctx.fillStyle = \"white\"\n                 ctx.fillRect(0,0, canvas.width, canvas.height)\n                \n                                // draw the edges\n                particleSystem.eachEdge(function(edge, pt1, pt2) {\n                    // edge: {source:Node, target:Node, length:#, data:{}}\n                    // pt1:  {x:#, y:#}  source position in screen coords\n                    // pt2:  {x:#, y:#}  target position in screen coords\n\n                    var weight = edge.data.weight\n                    var color = edge.data.color\n\n                    if (!color || (\"\" + color).match(/^[ \\t]*$/)) color = null\n\n                    // find the start point\n                    var tail = intersect_line_box(pt1, pt2, nodeBoxes[edge.source.name])\n                    var head = intersect_line_box(tail, pt2, nodeBoxes[edge.target.name])\n\n                    ctx.save()\n                    ctx.beginPath()\n                    ctx.lineWidth = (!isNaN(weight)) ? parseFloat(weight) : 1\n                    ctx.strokeStyle = (color) ? color : \"#cccccc\"\n                    ctx.fillStyle = null\n\n                    ctx.moveTo(tail.x, tail.y)\n                    ctx.lineTo(head.x, head.y)\n                    ctx.stroke()\n                    ctx.restore()\n\n                    // draw an arrowhead if this is a -> style edge\n                    if (edge.data.directed) {\n                        ctx.save()\n                        // move to the head position of the edge we just drew\n                        var wt = !isNaN(weight) ? parseFloat(weight) : 1\n                        var arrowLength = 6 + wt\n                        var arrowWidth = 2 + wt\n                        ctx.fillStyle = (color) ? color : \"#cccccc\"\n                        ctx.translate(head.x, head.y);\n                        ctx.rotate(Math.atan2(head.y - tail.y, head.x - tail.x));\n\n                        // delete some of the edge that's already there (so the point isn't hidden)\n                        ctx.clearRect(-arrowLength / 2, - wt / 2, arrowLength / 2, wt)\n\n                        // draw the chevron\n                        ctx.beginPath();\n                        ctx.moveTo(-arrowLength, arrowWidth);\n                        ctx.lineTo(0, 0);\n                        ctx.lineTo(-arrowLength, - arrowWidth);\n                        ctx.lineTo(-arrowLength * 0.8, - 0);\n                        ctx.closePath();\n                        ctx.fill();\n                        ctx.restore()\n                    }\n                })\n                \n                // draw the nodes & save their bounds for edge drawing\n                var nodeBoxes = {}\n                particleSystem.eachNode(function(node, pt) {\n                    // node: {mass:#, p:{x,y}, name:\"\", data:{}}\n                    // pt:   {x:#, y:#}  node position in screen coords\n\n                    // determine the box size and round off the coords if we'll be \n                    // drawing a text label (awful alignment jitter otherwise...)\n                    var label = node.data.label || \"\"\n                    var w = ctx.measureText(\"\" + label).width + 10\n                    if (!(\"\" + label).match(/^[ \\t]*$/)) {\n                        pt.x = Math.floor(pt.x)\n                        pt.y = Math.floor(pt.y)\n                    }\n                    else {\n                        label = null\n                    }\n\n                    // draw a rectangle centered at pt\n                    if (node.data.color) ctx.fillStyle = node.data.color\n                    else ctx.fillStyle = \"rgba(0,0,0,.2)\"\n                    if (node.data.color == 'none') ctx.fillStyle = \"white\"\n\n                    if (node.data.shape == 'dot') {\n                        gfx.oval(pt.x - w / 2, pt.y - w / 2, w, w, {\n                            fill: ctx.fillStyle\n                        })\n                        nodeBoxes[node.name] = [pt.x - w / 2, pt.y - w / 2, w, w]\n                    }\n                    else {\n                        gfx.rect(pt.x - w / 2, pt.y - 10, w, 20, 4, {\n                            fill: ctx.fillStyle\n                        })\n                        nodeBoxes[node.name] = [pt.x - w / 2, pt.y - 11, w, 22]\n                    }\n\n                    // draw the text\n                    if (label) {\n                        ctx.font = \"12px Helvetica\"\n                        ctx.textAlign = \"center\"\n                        ctx.fillStyle = \"white\"\n                        if (node.data.color == 'none') ctx.fillStyle = '#333333'\n                        ctx.fillText(label || \"\", pt.x, pt.y + 4)\n                        ctx.fillText(label || \"\", pt.x, pt.y + 4)\n                    }\n                })\n\n\n\n            },\n            initMouseHandling: function() {\n                // no-nonsense drag and drop (thanks springy.js)\n                selected = null;\n                nearest = null;\n                var dragged = null;\n                var oldmass = 1\n\n                // set up a handler object that will initially listen for mousedowns then\n                // for moves and mouseups while dragging\n                var handler = {\n                    clicked: function(e) {\n                        var pos = $(canvas).offset();\n                        _mouseP = arbor.Point(e.pageX - pos.left, e.pageY - pos.top)\n                        selected = nearest = dragged = particleSystem.nearest(_mouseP);\n\n                        if (dragged.node !== null) dragged.node.fixed = true\n\n                        $(canvas).bind('mousemove', handler.dragged)\n                        $(window).bind('mouseup', handler.dropped)\n\n                        return false\n                    },\n                    dragged: function(e) {\n                        var old_nearest = nearest && nearest.node._id\n                        var pos = $(canvas).offset();\n                        var s = arbor.Point(e.pageX - pos.left, e.pageY - pos.top)\n\n                        if (!nearest) return\n                        if (dragged !== null && dragged.node !== null) {\n                            var p = particleSystem.fromScreen(s)\n                            dragged.node.p = p\n                        }\n\n                        return false\n                    },\n\n                    dropped: function(e) {\n                        if (dragged === null || dragged.node === undefined) return\n                        if (dragged.node !== null) dragged.node.fixed = false\n                        dragged.node.tempMass = 50\n                        dragged = null\n                        selected = null\n                        $(canvas).unbind('mousemove', handler.dragged)\n                        $(window).unbind('mouseup', handler.dropped)\n                        _mouseP = null\n                        return false\n                    }\n                }\n                $(canvas).mousedown(handler.clicked);\n\n            }\n\n        }\n\n        // helpers for figuring out where to draw arrows (thanks springy.js)\n        var intersect_line_line = function(p1, p2, p3, p4) {\n            var denom = ((p4.y - p3.y) * (p2.x - p1.x) - (p4.x - p3.x) * (p2.y - p1.y));\n            if (denom === 0) return false // lines are parallel\n            var ua = ((p4.x - p3.x) * (p1.y - p3.y) - (p4.y - p3.y) * (p1.x - p3.x)) / denom;\n            var ub = ((p2.x - p1.x) * (p1.y - p3.y) - (p2.y - p1.y) * (p1.x - p3.x)) / denom;\n\n            if (ua < 0 || ua > 1 || ub < 0 || ub > 1) return false\n            return arbor.Point(p1.x + ua * (p2.x - p1.x), p1.y + ua * (p2.y - p1.y));\n        }\n\n        var intersect_line_box = function(p1, p2, boxTuple) {\n            var p3 = {\n                x: boxTuple[0],\n                y: boxTuple[1]\n            },\n            w = boxTuple[2],\n                h = boxTuple[3]\n\n            var tl = {\n                x: p3.x,\n                y: p3.y\n            };\n            var tr = {\n                x: p3.x + w,\n                y: p3.y\n            };\n            var bl = {\n                x: p3.x,\n                y: p3.y + h\n            };\n            var br = {\n                x: p3.x + w,\n                y: p3.y + h\n            };\n\n            return intersect_line_line(p1, p2, tl, tr) || intersect_line_line(p1, p2, tr, br) || intersect_line_line(p1, p2, br, bl) || intersect_line_line(p1, p2, bl, tl) || false\n        }\n\n        return that\n    }\n"],[0,"\n})("]],"start1":7,"start2":7,"length1":7219,"length2":8960}]],"length":8968,"saved":false}
{"ts":1364377391889,"patch":[[{"diffs":[[0,"                "],[1," "],[0,"\n               "]],"start1":665,"start2":665,"length1":32,"length2":33},{"diffs":[[0,"                "],[1,"// draw the nodes & save their bounds for edge drawing\n                var nodeBoxes = {}\n                particleSystem.eachNode(function(node, pt) {\n                    // node: {mass:#, p:{x,y}, name:\"\", data:{}}\n                    // pt:   {x:#, y:#}  node position in screen coords\n\n                    // determine the box size and round off the coords if we'll be \n                    // drawing a text label (awful alignment jitter otherwise...)\n                    var label = node.data.label || \"\"\n                    var w = ctx.measureText(\"\" + label).width + 10\n                    if (!(\"\" + label).match(/^[ \\t]*$/)) {\n                        pt.x = Math.floor(pt.x)\n                        pt.y = Math.floor(pt.y)\n                    }\n                    else {\n                        label = null\n                    }\n\n                    // draw a rectangle centered at pt\n                    if (node.data.color) ctx.fillStyle = node.data.color\n                    else ctx.fillStyle = \"rgba(0,0,0,.2)\"\n                    if (node.data.color == 'none') ctx.fillStyle = \"white\"\n\n                    if (node.data.shape == 'dot') {\n                        gfx.oval(pt.x - w / 2, pt.y - w / 2, w, w, {\n                            fill: ctx.fillStyle\n                        })\n                        nodeBoxes[node.name] = [pt.x - w / 2, pt.y - w / 2, w, w]\n                    }\n                    else {\n                        gfx.rect(pt.x - w / 2, pt.y - 10, w, 20, 4, {\n                            fill: ctx.fillStyle\n                        })\n                        nodeBoxes[node.name] = [pt.x - w / 2, pt.y - 11, w, 22]\n                    }\n\n                    // draw the text\n                    if (label) {\n                        ctx.font = \"12px Helvetica\"\n                        ctx.textAlign = \"center\"\n                        ctx.fillStyle = \"white\"\n                        if (node.data.color == 'none') ctx.fillStyle = '#333333'\n                        ctx.fillText(label || \"\", pt.x, pt.y + 4)\n                        ctx.fillText(label || \"\", pt.x, pt.y + 4)\n                    }\n                })\n\n\n"],[0,"                "]],"start1":683,"start2":683,"length1":32,"length2":2184},{"diffs":[[0," })\n"],[-1,"                \n                // draw the nodes & save their bounds for edge drawing\n                var nodeBoxes = {}\n                particleSystem.eachNode(function(node, pt) {\n                    // node: {mass:#, p:{x,y}, name:\"\", data:{}}\n                    // pt:   {x:#, y:#}  node position in screen coords\n\n                    // determine the box size and round off the coords if we'll be \n                    // drawing a text label (awful alignment jitter otherwise...)\n                    var label = node.data.label || \"\"\n                    var w = ctx.measureText(\"\" + label).width + 10\n                    if (!(\"\" + label).match(/^[ \\t]*$/)) {\n                        pt.x = Math.floor(pt.x)\n                        pt.y = Math.floor(pt.y)\n                    }\n                    else {\n                        label = null\n                    }\n\n                    // draw a rectangle centered at pt\n                    if (node.data.color) ctx.fillStyle = node.data.color\n                    else ctx.fillStyle = \"rgba(0,0,0,.2)\"\n                    if (node.data.color == 'none') ctx.fillStyle = \"white\"\n\n                    if (node.data.shape == 'dot') {\n                        gfx.oval(pt.x - w / 2, pt.y - w / 2, w, w, {\n                            fill: ctx.fillStyle\n                        })\n                        nodeBoxes[node.name] = [pt.x - w / 2, pt.y - w / 2, w, w]\n                    }\n                    else {\n                        gfx.rect(pt.x - w / 2, pt.y - 10, w, 20, 4, {\n                            fill: ctx.fillStyle\n                        })\n                        nodeBoxes[node.name] = [pt.x - w / 2, pt.y - 11, w, 22]\n                    }\n\n                    // draw the text\n                    if (label) {\n                        ctx.font = \"12px Helvetica\"\n                        ctx.textAlign = \"center\"\n                        ctx.fillStyle = \"white\"\n                        if (node.data.color == 'none') ctx.fillStyle = '#333333'\n                        ctx.fillText(label || \"\", pt.x, pt.y + 4)\n                        ctx.fillText(label || \"\", pt.x, pt.y + 4)\n                    }\n                })\n"],[0,"\n\n\n "]],"start1":5251,"start2":5251,"length1":2191,"length2":8}]],"length":8938,"saved":false}
{"ts":1364378365813,"patch":[[{"diffs":[[0,"licked);"],[1,"\n                \n                \n                \n                "],[0,"\n\n      "]],"start1":7445,"start2":7445,"length1":16,"length2":84}]],"length":9006,"saved":false}
{"ts":1364379630624,"patch":[[{"diffs":[[0,"              }\n"],[1,"                    \n                    if(edge.data.name){\n                        ctx.strokeStyle = \"rgba(0,0,0, .333)\";\n                        ctx.lineWidth = 1;\n                        ctx.beginPath ();\n                        ctx.moveTo (pt1.x, pt1.y);\n                        ctx.lineTo (pt2.x, pt2.y);\n                        ctx.stroke ();\n                \n                        ctx.fillStyle = \"black\";\n                        ctx.font = 'italic 13px sans-serif';\n                        ctx.fillText (edge.data.name, (pt1.x + pt2.x) / 2, (pt1.y + pt2.y) / 2);\n                    }\n"],[0,"                "]],"start1":5220,"start2":5220,"length1":32,"length2":628},{"diffs":[[0,"               \n"],[1,"               initMouseHandling: function() {\n                // no-nonsense drag and drop (thanks springy.js)\n                selected = null;\n                nearest = null;\n                var dragged = null;\n                var oldmass = 1\n\n                // set up a handler object that will initially listen for mousedowns then\n                // for moves and mouseups while dragging\n                var handler = {\n                    clicked: function(e) {\n                        var pos = $(canvas).offset();\n                        _mouseP = arbor.Point(e.pageX - pos.left, e.pageY - pos.top)\n                        selected = nearest = dragged = particleSystem.nearest(_mouseP);\n\n                        if (dragged.node !== null) dragged.node.fixed = true\n\n                        $(canvas).bind('mousemove', handler.dragged)\n                        $(window).bind('mouseup', handler.dropped)\n\n                        return false\n                    },\n                    dragged: function(e) {\n                        var old_nearest = nearest && nearest.node._id\n                        var pos = $(canvas).offset();\n                        var s = arbor.Point(e.pageX - pos.left, e.pageY - pos.top)\n\n                        if (!nearest) return\n                        if (dragged !== null && dragged.node !== null) {\n                            var p = particleSystem.fromScreen(s)\n                            dragged.node.p = p\n                        }\n\n                        return false\n                    },\n\n                    dropped: function(e) {\n                        if (dragged === null || dragged.node === undefined) return\n                        if (dragged.node !== null) dragged.node.fixed = false\n                        dragged.node.tempMass = 50\n                        dragged = null\n                        selected = null\n                        $(canvas).unbind('mousemove', handler.dragged)\n                        $(window).unbind('mouseup', handler.dropped)\n                        _mouseP = null\n                        return false\n                    }\n                }\n                $(canvas).mousedown(handler.clicked); \n                \n"],[0,"                "]],"start1":8051,"start2":8051,"length1":32,"length2":2234}]],"length":11804,"saved":false}
{"ts":1364379666634,"patch":[[{"diffs":[[0,"tx.fillStyle = \""],[-1,"white"],[1,"#ddd"],[0,"\"\n              "]],"start1":2572,"start2":2572,"length1":37,"length2":36}]],"length":11803,"saved":false}
{"ts":1364379695929,"patch":[[{"diffs":[[0,"ic 1"],[-1,"3px sans-serif"],[1,"2px Helvetica"],[0,"';\n "]],"start1":5691,"start2":5691,"length1":22,"length2":21}]],"length":11802,"saved":false}
{"ts":1364379711155,"patch":[[{"diffs":[[0," = \""],[-1,"black"],[1,"#333"],[0,"\";\n "]],"start1":5639,"start2":5639,"length1":13,"length2":12}]],"length":11801,"saved":false}
{"ts":1364379715893,"patch":[[{"diffs":[[0," = \"#333"],[1,"333"],[0,"\";\n     "]],"start1":5639,"start2":5639,"length1":16,"length2":19}]],"length":11804,"saved":false}
{"ts":1364379752483,"patch":[[{"diffs":[[0,"e){\n"],[-1,"                        ctx.strokeStyle = \"rgba(0,0,0, .333)\";\n                        ctx.lineWidth = 1;\n                        ctx.beginPath ();\n                        ctx.moveTo (pt1.x, pt1.y);\n                        ctx.lineTo (pt2.x, pt2.y);\n                        ctx.stroke ();\n                \n"],[0,"    "]],"start1":5292,"start2":5292,"length1":314,"length2":8}]],"length":11498,"saved":false}
{"ts":1364379775518,"patch":[[{"diffs":[[0," = \"#ddd"],[1,"ddd"],[0,"\"\n      "]],"start1":2584,"start2":2584,"length1":16,"length2":19}]],"length":11501,"saved":false}
{"ts":1364379889484,"patch":[[{"diffs":[[0,"d);\n"],[-1,"                \n               initMouseHandling: function() {\n                // no-nonsense drag and drop (thanks springy.js)\n                selected = null;\n                nearest = null;\n                var dragged = null;\n                var oldmass = 1\n\n                // set up a handler object that will initially listen for mousedowns then\n                // for moves and mouseups while dragging\n                var handler = {\n                    clicked: function(e) {\n                        var pos = $(canvas).offset();\n                        _mouseP = arbor.Point(e.pageX - pos.left, e.pageY - pos.top)\n                        selected = nearest = dragged = particleSystem.nearest(_mouseP);\n\n                        if (dragged.node !== null) dragged.node.fixed = true\n\n                        $(canvas).bind('mousemove', handler.dragged)\n                        $(window).bind('mouseup', handler.dropped)\n\n                        return false\n                    },\n                    dragged: function(e) {\n                        var old_nearest = nearest && nearest.node._id\n                        var pos = $(canvas).offset();\n                        var s = arbor.Point(e.pageX - pos.left, e.pageY - pos.top)\n\n                        if (!nearest) return\n                        if (dragged !== null && dragged.node !== null) {\n                            var p = particleSystem.fromScreen(s)\n                            dragged.node.p = p\n                        }\n\n                        return false\n                    },\n\n                    dropped: function(e) {\n                        if (dragged === null || dragged.node === undefined) return\n                        if (dragged.node !== null) dragged.node.fixed = false\n                        dragged.node.tempMass = 50\n                        dragged = null\n                        selected = null\n                        $(canvas).unbind('mousemove', handler.dragged)\n                        $(window).unbind('mouseup', handler.dropped)\n                        _mouseP = null\n                        return false\n                    }\n                }\n                $(canvas).mousedown(handler.clicked); \n                \n                \n                \n                \n\n"],[0,"    "]],"start1":7743,"start2":7743,"length1":2279,"length2":8}]],"length":9230,"saved":false}
{"ts":1364379899488,"patch":[[{"diffs":[[0,"     })\n"],[-1,"\n\n\n"],[0,"        "]],"start1":5540,"start2":5540,"length1":19,"length2":16}]],"length":9227,"saved":false}
{"ts":1364380008533,"patch":[[{"diffs":[[0,"= \"#"],[-1,"dddddd"],[1,"eeeeee"],[0,"\"\n  "]],"start1":2585,"start2":2585,"length1":14,"length2":14},{"diffs":[[0,"italic 1"],[-1,"2"],[1,"1"],[0,"px Helve"]],"start1":5386,"start2":5386,"length1":17,"length2":17}]],"length":9227,"saved":false}
{"ts":1364381393688,"patch":[[{"diffs":[[0,"tyle = \""],[-1,"white"],[1,"#333333"],[0,"\"\n      "]],"start1":586,"start2":586,"length1":21,"length2":23}]],"length":9229,"saved":false}
{"ts":1364381422116,"patch":[[{"diffs":[[0," = \""],[-1,"#eeeee"],[1,"whit"],[0,"e\"\n "]],"start1":2586,"start2":2586,"length1":14,"length2":12}]],"length":9227,"saved":false}
{"ts":1364381465013,"patch":[[{"diffs":[[0,"yle = \"#"],[-1,"333333"],[1,"555555"],[0,"\"\n      "]],"start1":587,"start2":587,"length1":22,"length2":22}]],"length":9227,"saved":false}
{"ts":1364381478585,"patch":[[{"diffs":[[0,"= \"#"],[-1,"555555"],[1,"888888"],[0,"\"\n  "]],"start1":591,"start2":591,"length1":14,"length2":14}]],"length":9227,"saved":false}
{"ts":1364381504101,"patch":[[{"diffs":[[0," = \""],[-1,"#888888"],[1,"white"],[0,"\"\n  "]],"start1":590,"start2":590,"length1":15,"length2":13}]],"length":9225,"saved":false}
{"ts":1364381537088,"patch":[[{"diffs":[[0,"or) ? color : \"#"],[-1,"cccccc"],[1,"333333"],[0,"\"\n              "]],"start1":3766,"start2":3766,"length1":38,"length2":38},{"diffs":[[0,": \"#"],[-1,"cccccc"],[1,"333333"],[0,"\"\n  "]],"start1":4447,"start2":4447,"length1":14,"length2":14}]],"length":9225,"saved":false}
{"ts":1364381550291,"patch":[[{"diffs":[[0,"or) ? color : \"#"],[-1,"333333"],[1,"aaaaaa"],[0,"\"\n              "]],"start1":3766,"start2":3766,"length1":38,"length2":38}]],"length":9225,"saved":false}
{"contributors":[],"silentsave":false,"ts":1364414281807,"patch":[[{"diffs":[[0,"mass = 1"],[1,";"],[0,"\n\n      "]],"start1":5794,"start2":5794,"length1":16,"length2":17},{"diffs":[[0,"mouseP);"],[1,"\n                        \n                        alert(selected.data.name);"],[0,"\n\n      "]],"start1":6245,"start2":6245,"length1":16,"length2":92}]],"length":9302,"saved":false}
{"ts":1364414406914,"patch":[[{"diffs":[[0,"elected."],[-1,"data"],[1,"node"],[0,".name);\n"]],"start1":6310,"start2":6310,"length1":20,"length2":20}]],"length":9302,"saved":false}
{"ts":1364415726119,"patch":[[{"diffs":[[0,"                "],[-1," "],[0,"ctx.fillStyle = "]],"start1":560,"start2":560,"length1":33,"length2":32},{"diffs":[[0,"                "],[-1," "],[0,"ctx.fillRect(0,0"]],"start1":600,"start2":600,"length1":33,"length2":32},{"diffs":[[0,"lRect(0,"],[1," "],[0,"0, canva"]],"start1":623,"start2":623,"length1":16,"length2":17},{"diffs":[[0,"height)\n"],[-1,"                 "],[0,"\n       "]],"start1":656,"start2":656,"length1":33,"length2":16},{"diffs":[[0,"      }\n"],[-1,"                    "],[0,"\n       "]],"start1":5210,"start2":5210,"length1":36,"length2":16},{"diffs":[[0,"      if"],[1," "],[0,"(edge.da"]],"start1":5233,"start2":5233,"length1":16,"length2":17},{"diffs":[[0,"ta.name)"],[1," "],[0,"{\n      "]],"start1":5250,"start2":5250,"length1":16,"length2":17},{"diffs":[[0,"fillText"],[-1," "],[0,"(edge.da"]],"start1":5400,"start2":5400,"length1":17,"length2":16},{"diffs":[[0,") {\n"],[-1,"                // no-nonsense drag and drop (thanks springy.js)\n"],[0,"    "]],"start1":5564,"start2":5564,"length1":73,"length2":8},{"diffs":[[0,"1;\n\n"],[-1,"                // set up a handler object that will initially listen for mousedowns then\n                // for moves and mouseups while dragging"],[0,"\n"],[1,""],[0,"    "]],"start1":5699,"start2":5699,"length1":155,"length2":9},{"diffs":[[0,"eP);"],[-1,"\n                        \n                        alert(selected.node.name);"],[0,"\n\n  "]],"start1":6001,"start2":6001,"length1":84,"length2":8},{"diffs":[[0,"ropped)\n"],[1,"                        that.customNodeClick.printCourse(that.customNodeClick.courses[selected.node.name], that.customNodeClick.element);"],[0,"\n       "]],"start1":6213,"start2":6213,"length1":16,"length2":153}]],"length":9115,"saved":false}
{"ts":1364415923876,"patch":[[{"diffs":[[0,"ick."],[-1,"printCourse"],[1,"updateCourseSelected"],[0,"(tha"]],"start1":6262,"start2":6262,"length1":19,"length2":28},{"diffs":[[0,"ame]"],[-1,", that.customNodeClick.element"],[0,");\n "]],"start1":6331,"start2":6331,"length1":38,"length2":8}]],"length":9094,"saved":false}
{"ts":1364416124485,"patch":[[{"diffs":[[0,"ont = \"1"],[-1,"2"],[1,"5"],[0,"px Helve"]],"start1":2457,"start2":2457,"length1":17,"length2":17}]],"length":9094,"saved":false}
{"ts":1364419619600,"patch":[[{"diffs":[[0,"ss = 1;\n"],[-1,"\n\n"],[0,"        "]],"start1":5694,"start2":5694,"length1":18,"length2":16},{"diffs":[[0,"handler = {\n"],[1,"                    moved: function(e) {\n                        var pos = $(canvas).offset();\n                        _mouseP = arbor.Point(e.pageX - pos.left, e.pageY - pos.top)\n                        nearest = sys.nearest(_mouseP);\n\n                        if (!nearest.node){\n                            $('canvas').css( 'cursor', 'default' );\n                            return false\n                        }else{\n                            $('canvas').css( 'cursor', 'pointer' );\n                        }\n                    },\n"],[0,"            "]],"start1":5722,"start2":5722,"length1":24,"length2":562}]],"length":9630,"saved":false}
{"ts":1364419671095,"patch":[[{"diffs":[[0,"icked);\n"],[1,"                $(canvas).mousemove(handler.moved);\n"],[0,"        "]],"start1":8139,"start2":8139,"length1":16,"length2":68}]],"length":9682,"saved":false}
{"ts":1364419695624,"patch":[[{"diffs":[[0,"             },\n"],[-1,"\n"],[0,"                "]],"start1":7486,"start2":7486,"length1":33,"length2":32}]],"length":9681,"saved":false}
{"ts":1364419781973,"patch":[[{"diffs":[[0,"arest = "],[-1,"sys"],[1,"particleSystem"],[0,".nearest"]],"start1":5940,"start2":5940,"length1":19,"length2":30}]],"length":9692,"saved":false}
{"ts":1364419946246,"patch":[[{"diffs":[[0,"if ("],[-1,"!"],[0,"nearest."],[-1,"node"],[1,"distance < 20"],[0,"){\n "]],"start1":6006,"start2":6006,"length1":21,"length2":29}]],"length":9700,"saved":false}
{"ts":1364419995893,"patch":[[{"diffs":[[0,"istance "],[-1,"<"],[1,">"],[0," 20){\n  "]],"start1":6019,"start2":6019,"length1":17,"length2":17}]],"length":9700,"saved":false}
{"ts":1364420762045,"patch":[[{"diffs":[[0,"ont = \"1"],[-1,"5"],[1,"2"],[0,"px Helve"]],"start1":2457,"start2":2457,"length1":17,"length2":17}]],"length":9700,"saved":false}
{"ts":1364421637704,"patch":[[{"diffs":[[0,"ont = \"1"],[-1,"2"],[1,"0"],[0,"px Helve"]],"start1":2457,"start2":2457,"length1":17,"length2":17}]],"length":9700,"saved":false}
{"ts":1364422994363,"patch":[[{"diffs":[[0,"tx.fillStyle = \""],[-1,"white"],[1,"#EFEFEF"],[0,"\"\n              "]],"start1":577,"start2":577,"length1":37,"length2":39}]],"length":9702,"saved":false}
{"ts":1364423173557,"patch":[[{"diffs":[[0,"ick."],[-1,"updateCourseSelected"],[1,"setCourse"],[0,"(tha"]],"start1":6819,"start2":6819,"length1":28,"length2":17}]],"length":9691,"saved":false}
{"contributors":["garrettsmith@live.ca"],"silentsave":false,"ts":1364423590224,"patch":[[{"diffs":[[0,"rse("],[-1,"that.customNodeClick.courses["],[0,"sele"]],"start1":6829,"start2":6829,"length1":37,"length2":8},{"diffs":[[0,"ode.name"],[-1,"]"],[0,");\n     "]],"start1":6843,"start2":6843,"length1":17,"length2":16}]],"length":9661,"saved":false}
{"contributors":["jamesmackay10011@gmail.com"],"silentsave":false,"ts":1364424510004,"patch":[[{"diffs":[[0,"arest(_mouseP);\n"],[1,"                        if(selected !== null){\n                            that.customNodeClick.setCourse(selected.node.name);\n\n                        }"],[0,"\n               "]],"start1":6547,"start2":6547,"length1":32,"length2":185}]],"length":9814,"saved":false}
{"ts":1364424517056,"patch":[[{"diffs":[[0,".name);\n"],[-1,"\n"],[0,"        "]],"start1":6682,"start2":6682,"length1":17,"length2":16},{"diffs":[[0,"ed)\n"],[-1,"                        that.customNodeClick.setCourse(selected.node.name);\n"],[0,"    "]],"start1":6926,"start2":6926,"length1":84,"length2":8}]],"length":9737,"saved":false}
{"contributors":["jamesmackay10011@gmail.com"],"silentsave":false,"ts":1364424627391,"patch":[[{"diffs":[[0,"              }\n"],[1,"                        /*\n"],[0,"                "]],"start1":6700,"start2":6700,"length1":32,"length2":59},{"diffs":[[0,"    "],[-1,"return false\n                    }"],[1,"*/\n                        \n                        return false\n                    }\n                    /*\n                    "],[0,",\n  "]],"start1":6977,"start2":6977,"length1":42,"length2":138},{"diffs":[[0,"              }\n"],[1,"                    \n                    */\n"],[0,"                "]],"start1":8237,"start2":8237,"length1":32,"length2":76}]],"length":9904,"saved":false}
{"ts":1364425062763,"patch":[[{"diffs":[[0,"    if ("],[1,"neared.node.data.label !== \"OR\" && "],[0,"nearest."]],"start1":6004,"start2":6004,"length1":16,"length2":51},{"diffs":[[0,"!== null"],[1," && selected.node.data.label !== \"OR\""],[0,"){\n     "]],"start1":6634,"start2":6634,"length1":16,"length2":53}]],"length":9976,"saved":false}
{"ts":1364425202592,"patch":[[{"diffs":[[0,"if ("],[-1,"neared.node.data.label !== \"OR\" && "],[0,"near"]],"start1":6008,"start2":6008,"length1":43,"length2":8}]],"length":9941,"saved":false}
{"ts":1364425255724,"patch":[[{"diffs":[[0,"    if ("],[1,"neared.node.data.label !== \"OR\" && "],[0,"nearest."]],"start1":6004,"start2":6004,"length1":16,"length2":51},{"diffs":[[0,"istance "],[-1,">"],[1,"<"],[0," 20){\n  "]],"start1":6056,"start2":6056,"length1":17,"length2":17},{"diffs":[[0,"', '"],[-1,"default"],[1,"pointer"],[0,"' );"]],"start1":6123,"start2":6123,"length1":15,"length2":15},{"diffs":[[0,"    return false"],[1,";"],[0,"\n               "]],"start1":6163,"start2":6163,"length1":32,"length2":33},{"diffs":[[0," 'cursor', '"],[-1,"pointer' )"],[1,"default' );\n                            return false"],[0,";\n          "]],"start1":6256,"start2":6256,"length1":34,"length2":76}]],"length":10019,"saved":false}
{"ts":1364425297281,"patch":[[{"diffs":[[0,"f (neare"],[-1,"d"],[1,"st"],[0,".node.da"]],"start1":6009,"start2":6009,"length1":17,"length2":18}]],"length":10020,"saved":false}
{"ts":1364425419359,"patch":[[{"diffs":[[0,"selected"],[-1," !== null"],[1,".distance < 20"],[0," && sele"]],"start1":6669,"start2":6669,"length1":25,"length2":30}]],"length":10025,"saved":false}
{"ts":1364425438004,"patch":[[{"diffs":[[0,"ted."],[-1,"distance < 20 && selected.node.data.label !== \"OR\""],[1,"node.data.label !== \"OR\" && selected.distance < 20 "],[0,"){\n "]],"start1":6674,"start2":6674,"length1":58,"length2":59}]],"length":10026,"saved":false}
{"contributors":[],"silentsave":false,"ts":1364438298973,"patch":[[{"diffs":[[0,"t)\n\n"],[-1,"                // draw the nodes & save their bounds for edge drawing\n"],[0,"    "]],"start1":663,"start2":663,"length1":79,"length2":8},{"diffs":[[0,"es = {}\n"],[1,""],[0,"        "]],"start1":694,"start2":694,"length1":16,"length2":16},{"diffs":[[0,"ds\n\n"],[-1,"                    // determine the box size and round off the coords if we'll be \n                    // drawing a text label (awful alignment jitter otherwise...)"],[0,"\n"],[1,""],[0,"    "]],"start1":897,"start2":897,"length1":174,"length2":9},{"diffs":[[0,"a.color)"],[1,"{ \n                       "],[0," ctx.fil"]],"start1":1374,"start2":1374,"length1":16,"length2":42},{"diffs":[[0,"ta.color"],[1,";"],[0,"\n       "]],"start1":1432,"start2":1432,"length1":16,"length2":17},{"diffs":[[0,"            "],[1,"}"],[0,"else ctx.fil"]],"start1":1450,"start2":1450,"length1":24,"length2":25},{"diffs":[[0,".2)\""],[-1,"\n                    if (node.data.color == 'none') ctx.fillStyle = \"white\""],[0,"\n\n  "]],"start1":1496,"start2":1496,"length1":83,"length2":8}]],"length":9743,"saved":false}
{"contributors":[],"silentsave":false,"ts":1364438432166,"patch":[[{"diffs":[[0,"            "],[-1,""],[0,""],[1,"var nodeBoxes = {};\n                "],[0,"if (!particl"]],"start1":519,"start2":519,"length1":24,"length2":60},{"diffs":[[0,"t)\n\n"],[-1,"                var nodeBoxes = {}\n                particleSystem.eachNode(function(node, pt) {\n"],[0,"    "]],"start1":699,"start2":699,"length1":104,"length2":8},{"diffs":[[0," coords\n"],[1,"                    particleSystem.eachNode(function(node, pt) {\n"],[0,"\n\n      "]],"start1":832,"start2":832,"length1":16,"length2":81},{"diffs":[[0,"el || \"\""],[1,";"],[0,"\n       "]],"start1":952,"start2":952,"length1":16,"length2":17},{"diffs":[[0,"dth + 10"],[1,";"],[0,"\n       "]],"start1":1020,"start2":1020,"length1":16,"length2":17},{"diffs":[[0,"or(pt.x)"],[1,";"],[0,"\n       "]],"start1":1128,"start2":1128,"length1":16,"length2":17},{"diffs":[[0,"or(pt.y)"],[1,";"],[0,"\n       "]],"start1":1177,"start2":1177,"length1":16,"length2":17},{"diffs":[[0,"label = null"],[1,";"],[0,"\n           "]],"start1":1260,"start2":1260,"length1":24,"length2":25},{"diffs":[[0," }\n\n"],[-1,"                    // draw a rectangle centered at pt\n"],[0,"    "]],"start1":1293,"start2":1293,"length1":63,"length2":8},{"diffs":[[0,"   }else"],[1,"{\n                       "],[0," ctx.fil"]],"start1":1414,"start2":1414,"length1":16,"length2":41},{"diffs":[[0,"0,0,.2)\""],[1,";\n                    } "],[0,"\n\n      "]],"start1":1472,"start2":1472,"length1":16,"length2":40}]],"length":9747,"saved":false}
{"ts":1364438455307,"patch":[[{"diffs":[[0,"    "],[-1,"var nodeBoxes = {};\n                if (!particleSystem) return"],[1,"if (!particleSystem){\n                    return;    \n                } \n                var nodeBoxes = {};"],[0,"\n\n  "]],"start1":527,"start2":527,"length1":71,"length2":116}]],"length":9792,"saved":false}
{"ts":1364438661924,"patch":[[{"diffs":[[0,").get(0)"],[-1,""],[0,""],[1,";"],[0,"\n       "]],"start1":78,"start2":78,"length1":16,"length2":17},{"diffs":[[0,"(canvas)"],[1,";"],[0,"\n       "]],"start1":163,"start2":163,"length1":16,"length2":17},{"diffs":[[0,"ystem = null"],[1,";"],[0,"\n\n        va"]],"start1":194,"start2":194,"length1":24,"length2":25},{"diffs":[[0,"= system"],[1,";"],[0,"\n       "]],"start1":298,"start2":298,"length1":16,"length2":17},{"diffs":[[0,".height)"],[1,";"],[0,"\n       "]],"start1":370,"start2":370,"length1":16,"length2":17},{"diffs":[[0,"ding(40)"],[1,";"],[0,"\n\n      "]],"start1":420,"start2":420,"length1":16,"length2":17},{"diffs":[[0,"ndling()"],[1,";"],[0,"\n       "]],"start1":463,"start2":463,"length1":16,"length2":17},{"diffs":[[0,"#EFEFEF\""],[1,";"],[0,"\n       "]],"start1":681,"start2":681,"length1":16,"length2":17},{"diffs":[[0,".height)"],[1,";"],[0,"\n\n      "]],"start1":746,"start2":746,"length1":16,"length2":17},{"diffs":[[0,", pt) {\n"],[-1,"\n\n"],[1,"    "],[0,"        "]],"start1":951,"start2":951,"length1":18,"length2":20},{"diffs":[[0,"    var "],[1,"label,w;\n                        \n\n                    "],[0,"label = "]],"start1":979,"start2":979,"length1":16,"length2":71},{"diffs":[[0,"        "],[-1,"var "],[0,"w = ctx."]],"start1":1085,"start2":1085,"length1":20,"length2":16},{"diffs":[[0,"h + 10;\n"],[1,"                    \n"],[0,"        "]],"start1":1129,"start2":1129,"length1":16,"length2":37},{"diffs":[[0,"              })"],[1,";"],[0,"\n               "]],"start1":1813,"start2":1813,"length1":32,"length2":33},{"diffs":[[0,"2, w, w]"],[1,";"],[0,"\n       "]],"start1":1904,"start2":1904,"length1":16,"length2":17},{"diffs":[[0,"       }"],[-1,"\n                    "],[0,"else {\n "]],"start1":1927,"start2":1927,"length1":37,"length2":16},{"diffs":[[0,"              })"],[1,";"],[0,"\n               "]],"start1":2070,"start2":2070,"length1":32,"length2":33},{"diffs":[[0,", w, 22]"],[1,";"],[0,"\n       "]],"start1":2159,"start2":2159,"length1":16,"length2":17},{"diffs":[[0," }\n\n"],[-1,"                    // draw the text\n"],[0,"    "]],"start1":2188,"start2":2188,"length1":45,"length2":8},{"diffs":[[0,"lvetica\""],[1,";"],[0,"\n       "]],"start1":2268,"start2":2268,"length1":16,"length2":17},{"diffs":[[0,"\"center\""],[1,";"],[0,"\n       "]],"start1":2318,"start2":2318,"length1":16,"length2":17},{"diffs":[[0," \"white\""],[1,";"],[0,"\n       "]],"start1":2367,"start2":2367,"length1":16,"length2":17},{"diffs":[[0,"ne')"],[-1," ctx.fillStyle = '#333333'"],[1,"{\n                            ctx.fillStyle = '#333333';\n                        } "],[0,"\n   "]],"start1":2427,"start2":2427,"length1":34,"length2":91},{"diffs":[[0," pt.x, pt.y + 4)"],[1,";"],[0,"\n               "]],"start1":2564,"start2":2564,"length1":32,"length2":33},{"diffs":[[0,"t.y + 4)"],[1,";"],[0,"\n       "]],"start1":2639,"start2":2639,"length1":16,"length2":17},{"diffs":[[0,"      })"],[-1,""],[0,""],[1,";"],[0,"\n\n\n     "]],"start1":2681,"start2":2681,"length1":16,"length2":17}]],"length":9884,"saved":false}
{"ts":1364438739119,"patch":[[{"diffs":[[0,");\n\n"],[-1,"\n                // draw the edges\n                particleSystem.eachEdge(function(edge, pt1, pt2) {\n    "],[0,"    "]],"start1":2688,"start2":2688,"length1":114,"length2":8},{"diffs":[[0,"gth:#, data:{}}\n"],[-1,"    "],[0,"                "]],"start1":2747,"start2":2747,"length1":36,"length2":32},{"diffs":[[0,"n screen coords\n"],[-1,"    "],[0,"                "]],"start1":2817,"start2":2817,"length1":36,"length2":32},{"diffs":[[0," coords\n"],[1,"                particleSystem.eachEdge(function(edge, pt1, pt2) {\n                    var weight, color, tail, head;\n                    "],[0,"\n       "]],"start1":2895,"start2":2895,"length1":16,"length2":154},{"diffs":[[0,"            "],[-1," var"],[0," weight = ed"]],"start1":3049,"start2":3049,"length1":28,"length2":24},{"diffs":[[0,"        "],[-1,"var "],[0,"color = "]],"start1":3100,"start2":3100,"length1":20,"length2":16},{"diffs":[[0,"$/))"],[-1," color = null"],[1,"{\n                        color = null  \n                    } "],[0,"\n\n  "]],"start1":3194,"start2":3194,"length1":21,"length2":71}]],"length":9950,"saved":false}
{"ts":1364438815953,"patch":[[{"diffs":[[0,"a.weight"],[1,";"],[0,"\n       "]],"start1":3079,"start2":3079,"length1":16,"length2":17},{"diffs":[[0,"ta.color"],[1,";"],[0,"\n\n      "]],"start1":3124,"start2":3124,"length1":16,"length2":17},{"diffs":[[0," = null "],[1,";"],[0," \n      "]],"start1":3231,"start2":3231,"length1":16,"length2":17},{"diffs":[[0,"    "],[-1,"// find the start point\n                    var "],[0,"tail"]],"start1":3282,"start2":3282,"length1":56,"length2":8},{"diffs":[[0,"e.name])"],[1,";"],[0,"\n       "]],"start1":3342,"start2":3342,"length1":16,"length2":17},{"diffs":[[0,"        "],[-1,"var "],[0,"head = i"]],"start1":3364,"start2":3364,"length1":20,"length2":16},{"diffs":[[0,"t.name])"],[1,";"],[0,"\n\n      "]],"start1":3429,"start2":3429,"length1":16,"length2":17},{"diffs":[[0,"      ctx.save()"],[1,";"],[0,"\n               "]],"start1":3454,"start2":3454,"length1":32,"length2":33},{"diffs":[[0,"inPath()"],[1,";"],[0,"\n       "]],"start1":3499,"start2":3499,"length1":16,"length2":17},{"diffs":[[0,"loat(weight) : 1"],[1,";"],[0,"\n               "]],"start1":3570,"start2":3570,"length1":32,"length2":33},{"diffs":[[0,"#aaaaaa\""],[1,";"],[0,"\n       "]],"start1":3645,"start2":3645,"length1":16,"length2":17},{"diffs":[[0,"e = null"],[1,";"],[0,"\n\n      "]],"start1":3687,"start2":3687,"length1":16,"length2":17},{"diffs":[[0," tail.y)"],[1,";"],[0,"\n       "]],"start1":3736,"start2":3736,"length1":16,"length2":17},{"diffs":[[0," head.y)"],[1,";"],[0,"\n       "]],"start1":3784,"start2":3784,"length1":16,"length2":17},{"diffs":[[0,"stroke()"],[1,";"],[0,"\n       "]],"start1":3818,"start2":3818,"length1":16,"length2":17},{"diffs":[[0,"estore()"],[1,";"],[0,"\n\n      "]],"start1":3853,"start2":3853,"length1":16,"length2":17},{"diffs":[[0,"  }\n"],[-1,"                    /*\n                    ,\n                    dragged: function(e) {\n                        var old_nearest = nearest && nearest.node._id\n                        var pos = $(canvas).offset();\n                        var s = arbor.Point(e.pageX - pos.left, e.pageY - pos.top)\n\n                        if (!nearest) return\n                        if (dragged !== null && dragged.node !== null) {\n                            var p = particleSystem.fromScreen(s)\n                            dragged.node.p = p\n                        }\n\n                        return false\n                    },\n                    dropped: function(e) {\n                        if (dragged === null || dragged.node === undefined) return\n                        if (dragged.node !== null) dragged.node.fixed = false\n                        dragged.node.tempMass = 50\n                        dragged = null\n                        selected = null\n                        $(canvas).unbind('mousemove', handler.dragged)\n                        $(window).unbind('mouseup', handler.dropped)\n                        _mouseP = null\n                        return false\n                    }\n                    \n                    */\n"],[0,"    "]],"start1":7072,"start2":7072,"length1":1237,"length2":8}]],"length":8683,"saved":false}
{"ts":1364438823708,"patch":[[{"diffs":[[0,"  }\n"],[-1,"                        /*\n                        if (dragged.node !== null) dragged.node.fixed = true\n\n                        $(canvas).bind('mousemove', handler.dragged)\n                        $(window).bind('mouseup', handler.dropped)\n                        */\n                        \n"],[0,"    "]],"start1":6720,"start2":6720,"length1":301,"length2":8}]],"length":8390,"saved":false}
{"ts":1364438838343,"patch":[[{"diffs":[[0,"    return false"],[1,";"],[0,"\n               "]],"start1":6744,"start2":6744,"length1":32,"length2":33},{"diffs":[[0,"               }"],[1,";"],[0,"\n               "]],"start1":6785,"start2":6785,"length1":32,"length2":33},{"diffs":[[0,";\n            }\n"],[-1,"\n"],[0,"        }\n\n     "]],"start1":6907,"start2":6907,"length1":33,"length2":32}]],"length":8391,"saved":false}
{"ts":1364439090354,"patch":[[{"diffs":[[0,"    "],[-1,"selected = null;\n                nearest = null;\n                var dragged = null;\n                var oldmass = 1;\n                var handler = {"],[1,"var handler = {\n                    moved: function(e) {\n                        var pos, mouseP, nearest;"],[0,"\n   "]],"start1":5468,"start2":5468,"length1":157,"length2":114},{"diffs":[[0,"        "],[-1,"moved: function(e) {"],[1,"    "],[0,"\n       "]],"start1":5591,"start2":5591,"length1":36,"length2":20},{"diffs":[[0,"                "],[-1,"var "],[0,"pos = $(canvas)."]],"start1":5612,"start2":5612,"length1":36,"length2":32},{"diffs":[[0,"                "],[-1,"_"],[0,"mouseP = arbor.P"]],"start1":5662,"start2":5662,"length1":33,"length2":32},{"diffs":[[0,"eSystem.nearest("],[-1,"_"],[0,"mouseP);\n\n      "]],"start1":5779,"start2":5779,"length1":33,"length2":32},{"diffs":[[0,"ouseP);\n"],[1,"                        "],[0,"\n       "]],"start1":5796,"start2":5796,"length1":16,"length2":40},{"diffs":[[0,"(nearest"],[1," && nearest"],[0,".node.da"]],"start1":5856,"start2":5856,"length1":16,"length2":27},{"diffs":[[0,"    var "],[1,"pos, mouseP, nearest;\n                        \n                        "],[0,"pos = $("]],"start1":6291,"start2":6291,"length1":16,"length2":87},{"diffs":[[0,"        "],[-1,"_"],[0,"mouseP ="]],"start1":6412,"start2":6412,"length1":17,"length2":16},{"diffs":[[0,"    "],[-1,"selected = nearest = dragged"],[1,"nearest"],[0," = p"]],"start1":6500,"start2":6500,"length1":36,"length2":15},{"diffs":[[0,"nearest("],[-1,"_"],[0,"mouseP);"]],"start1":6529,"start2":6529,"length1":17,"length2":16}]],"length":8409,"saved":false}
{"ts":1364439132147,"patch":[[{"diffs":[[0,"     if("],[-1,"selected"],[1," nearest&& nearest"],[0,".node.da"]],"start1":6565,"start2":6565,"length1":24,"length2":34},{"diffs":[[0,"\"OR\" && "],[-1,"selected"],[1,"nearest"],[0,".distanc"]],"start1":6612,"start2":6612,"length1":24,"length2":23},{"diffs":[[0,"rse("],[-1,"selected"],[1,"nearest"],[0,".nod"]],"start1":6700,"start2":6700,"length1":16,"length2":15}]],"length":8417,"saved":false}
{"ts":1364439201139,"patch":[[{"diffs":[[0,"1.y));\n        }"],[1,";"],[0,"\n\n        var in"]],"start1":7586,"start2":7586,"length1":32,"length2":33},{"diffs":[[0,"        "],[-1,"    "],[0,"h = boxT"]],"start1":7801,"start2":7801,"length1":20,"length2":16},{"diffs":[[0,"Tuple[3]"],[1,";"],[0,"\n\n      "]],"start1":7816,"start2":7816,"length1":16,"length2":17},{"diffs":[[0," false\n        }"],[1,";"],[0,"\n\n        return"]],"start1":8366,"start2":8366,"length1":32,"length2":33},{"diffs":[[0,"that"],[1,";"],[0,"\n    }"],[1,";"],[0,"\n\n})()"],[1,";"]],"start1":8400,"start2":8400,"length1":16,"length2":19}]],"length":8419,"saved":false}
{"contributors":[],"silentsave":false,"ts":1364603459860,"patch":[[{"diffs":[[0,"abel !== \"OR\" &&"],[1," nearest.node.data.label !== \"AND\" &&"],[0," nearest.distanc"]],"start1":5887,"start2":5887,"length1":32,"length2":69},{"diffs":[[0,"abel !== \"OR\" &&"],[1," nearest.node.data.label !== \"AND\" &&"],[0," nearest.distanc"]],"start1":6640,"start2":6640,"length1":32,"length2":69}]],"length":8493,"saved":false}
{"contributors":[],"silentsave":false,"ts":1364615132370,"patch":[[{"diffs":[[0,"0,0,"],[-1,".2)"],[1,"1"],[0,"\";\n "]],"start1":1600,"start2":1600,"length1":11,"length2":9}]],"length":8491,"saved":false}
{"contributors":[],"silentsave":false,"ts":1364620515419,"patch":[[{"diffs":[[0,"(0,0,0,1"],[1,")"],[0,"\";\n     "]],"start1":1597,"start2":1597,"length1":16,"length2":17}]],"length":8492,"saved":false}
{"ts":1364621145112,"patch":[[{"diffs":[[0,"    "],[-1,"ctx.fillStyle = node.data.color"],[1,"var c = node.data.color;\n                        var a = c.a? c.a : 1;\n                        ctx.fillStyle = \"rgba(\"+c.r+\",\"+c.g+\",+\"c.b+\",\"+a+\")\""],[0,";\n  "]],"start1":1488,"start2":1488,"length1":39,"length2":156}]],"length":8609,"saved":false}
{"ts":1364621464091,"patch":[[{"diffs":[[0,"\"+c.g+\","],[-1,"+"],[0,"\""],[1,"+"],[0,"c.b+\",\"+"]],"start1":1617,"start2":1617,"length1":18,"length2":18}]],"length":8609,"saved":false}
{"ts":1364622621258,"patch":[[{"diffs":[[0,"    "],[-1,"color = edge.data.color"],[1,"\n                    var rgb = edge.data.color;\n                    var a = rgb.a? rgb.a : 1;\n\n                    color = \"rgba(\"+rgb.r+\",\"+rgb.g+\",\"+rgb.b+\",\"+a+\")\""],[0,";\n\n "]],"start1":3221,"start2":3221,"length1":31,"length2":174}]],"length":8752,"saved":false}
{"ts":1364622625763,"patch":[[{"diffs":[[0,".a : 1;\n"],[-1,"\n"],[0,"        "]],"start1":3311,"start2":3311,"length1":17,"length2":16}]],"length":8751,"saved":false}
{"ts":1364623366103,"patch":[[{"diffs":[[0,"    "],[-1,"var rgb"],[1,"color"],[0," = e"]],"start1":3242,"start2":3242,"length1":15,"length2":13},{"diffs":[[0,"lor;"],[-1,"\n                    var a = rgb.a? rgb.a : 1;\n                    color = \"rgba(\"+rgb.r+\",\"+rgb.g+\",\"+rgb.b+\",\"+a+\")\";"],[0,"\n\n  "]],"start1":3266,"start2":3266,"length1":127,"length2":8}]],"length":8630,"saved":false}
{"ts":1364624499941,"patch":[[{"diffs":[[0,"pointer' );\n"],[1,"                            nearest.data.color.a = 255;\n"],[0,"            "]],"start1":6158,"start2":6158,"length1":24,"length2":80}]],"length":8686,"saved":false}
{"ts":1364624582184,"patch":[[{"diffs":[[0,"nearest."],[1,"node."],[0,"data.col"]],"start1":6198,"start2":6198,"length1":16,"length2":21}]],"length":8691,"saved":false}
{"ts":1364624878650,"patch":[[{"diffs":[[0,"pointer' );\n"],[1,"                            nearest.node.point.x++; \n"],[0,"            "]],"start1":6158,"start2":6158,"length1":24,"length2":77}]],"length":8744,"saved":false}
{"ts":1364624890185,"patch":[[{"diffs":[[0,"ode."],[-1,"point.x++; "],[1,"data.color.a = 255;"],[0,"\n   "]],"start1":6207,"start2":6207,"length1":19,"length2":27},{"diffs":[[0,"st.node."],[-1,"data.color.a = 255;"],[1,"point.x++; "],[0,"\n       "]],"start1":6264,"start2":6264,"length1":35,"length2":27}]],"length":8744,"saved":false}
{"ts":1364625018419,"patch":[[{"diffs":[[0,"st.node."],[1,"_"],[0,"p"],[-1,"oint"],[0,".x++; \n "]],"start1":6264,"start2":6264,"length1":21,"length2":18}]],"length":8741,"saved":false}
{"ts":1364625095581,"patch":[[{"diffs":[[0,"_p.x"],[-1,"++"],[1," += 15"],[0,"; \n "]],"start1":6272,"start2":6272,"length1":10,"length2":14}]],"length":8745,"saved":false}
{"ts":1364625170342,"patch":[[{"diffs":[[0," += "],[-1,"15"],[1,"2"],[0,"; \n "]],"start1":6276,"start2":6276,"length1":10,"length2":9}]],"length":8744,"saved":false}
{"ts":1364625185004,"patch":[[{"diffs":[[0,"_p.x += "],[-1,"2"],[1,"1"],[0,"; \n     "]],"start1":6272,"start2":6272,"length1":17,"length2":17}]],"length":8744,"saved":false}
{"ts":1364625189143,"patch":[[{"diffs":[[0,"node._p."],[-1,"x"],[1,"y"],[0," += 1; \n"]],"start1":6267,"start2":6267,"length1":17,"length2":17}]],"length":8744,"saved":false}
{"ts":1364625200762,"patch":[[{"diffs":[[0," += 1; \n"],[1,"                            nearest.node._p.x += 1; \n\n"],[0,"        "]],"start1":6276,"start2":6276,"length1":16,"length2":70}]],"length":8798,"saved":false}
{"contributors":[],"silentsave":false,"ts":1364625309205,"patch":[[{"diffs":[[0,"    "],[-1,"nearest.node._p.y += 1; \n                            nearest.node._p.x += 1"],[1,"that.redraw()"],[0,"; \n\n"]],"start1":6255,"start2":6255,"length1":83,"length2":21}]],"length":8736,"saved":false}
{"ts":1364625503350,"patch":[[{"diffs":[[0," = 255;\n"],[1,"                            var edges = particleSystem.getEdgesTo(nearest.node);\n                            for(var key in edges){\n                                edges[key].data;\n                            }\n"],[0,"        "]],"start1":6223,"start2":6223,"length1":16,"length2":227}]],"length":8947,"saved":false}
{"ts":1364625557569,"patch":[[{"diffs":[[0,"ey].data"],[1,".weight = 5"],[0,";\n      "]],"start1":6402,"start2":6402,"length1":16,"length2":27}]],"length":8958,"saved":false}
{"ts":1364625621317,"patch":[[{"diffs":[[0,"getEdges"],[-1,"To"],[1,"From"],[0,"(nearest"]],"start1":6286,"start2":6286,"length1":18,"length2":20}]],"length":8960,"saved":false}
{"ts":1364625699191,"patch":[[{"diffs":[[0,"pointer' );\n"],[1,"                            \n                            function highlight(){\n                                \n                            }\n"],[0,"            "]],"start1":6158,"start2":6158,"length1":24,"length2":166}]],"length":9102,"saved":false}
{"ts":1364625817532,"patch":[[{"diffs":[[0,"ghlight("],[1,"node"],[0,"){\n     "]],"start1":6238,"start2":6238,"length1":16,"length2":20},{"diffs":[[0,"    "],[-1,"    \n                            }\n                            nearest."],[0,"node"]],"start1":6277,"start2":6277,"length1":79,"length2":8},{"diffs":[[0,"eight = "],[-1,"5"],[1,"3;\n                                edges[key]"],[0,";\n      "]],"start1":6489,"start2":6489,"length1":17,"length2":61},{"diffs":[[0,"draw(); "],[1,"\n                            }highlight(nearest.node);"],[0,"\n\n      "]],"start1":6609,"start2":6609,"length1":16,"length2":70}]],"length":9133,"saved":false}
{"ts":1364625863302,"patch":[[{"diffs":[[0,"        "],[-1,"edges[key]"],[1,"highlight([key].target.data)"],[0,";\n      "]],"start1":6524,"start2":6524,"length1":26,"length2":44}]],"length":9151,"saved":false}
{"ts":1364625953542,"patch":[[{"diffs":[[0,"ghlight("],[1,"edges"],[0,"[key].ta"]],"start1":6534,"start2":6534,"length1":16,"length2":21}]],"length":9156,"saved":false}
{"ts":1364626219393,"patch":[[{"diffs":[[0,"    "],[-1,"node.data.color.a"],[1,"    var operable = node.data.color.a? node.data.color.a : node.color.a ;\n                                operable"],[0," = 255;\n"],[1,"    "],[0,"    "]],"start1":6277,"start2":6277,"length1":33,"length2":133},{"diffs":[[0,"        "],[1,"    "],[0,"for(var "]],"start1":6509,"start2":6509,"length1":16,"length2":20},{"diffs":[[0,"        "],[1,"  "],[1,"  "],[0,"edges[ke"]],"start1":6568,"start2":6568,"length1":16,"length2":20},{"diffs":[[0,"ht = 3;\n"],[1,"    "],[0,"        "]],"start1":6600,"start2":6600,"length1":16,"length2":20},{"diffs":[[0,"                "],[1,"  "],[-1,"}\n"],[1,"  }\n    "],[0,"                "]],"start1":6691,"start2":6691,"length1":34,"length2":42},{"diffs":[[0,".node);\n"],[-1,"\n"],[0,"        "]],"start1":6807,"start2":6807,"length1":17,"length2":16}]],"length":9275,"saved":false}
{"ts":1364626375212,"patch":[[{"diffs":[[0,".color.a"],[1," !== undefined"],[0,"? node.d"]],"start1":6309,"start2":6309,"length1":16,"length2":30}]],"length":9289,"saved":false}
{"ts":1364626574030,"patch":[[{"diffs":[[0,"    "],[-1," var operable ="],[0," nod"]],"start1":6280,"start2":6280,"length1":23,"length2":8},{"diffs":[[0,"r.a "],[-1,"!== undefined? node.data.color.a : node.color.a ;\n                                operable "],[0,"= 25"]],"start1":6299,"start2":6299,"length1":99,"length2":8},{"diffs":[[0,"ghlight("],[1,"particleSystem.getNode("],[0,"edges[ke"]],"start1":6554,"start2":6554,"length1":16,"length2":39},{"diffs":[[0,"et.data)"],[1,")"],[0,";\n      "]],"start1":6600,"start2":6600,"length1":16,"length2":17}]],"length":9207,"saved":false}
{"ts":1364626713732,"patch":[[{"diffs":[[0,"ght("],[-1,"particleSystem.getNode("],[0,"edge"]],"start1":6558,"start2":6558,"length1":31,"length2":8},{"diffs":[[0,"rget"],[-1,".data)"],[0,");\n "]],"start1":6575,"start2":6575,"length1":14,"length2":8}]],"length":9178,"saved":false}
{"ts":1364627068787,"patch":[[{"diffs":[[0,"edges){\n"],[1,"                                    if(edges[key].data.color !== \"none\"){\n    "],[0,"        "]],"start1":6444,"start2":6444,"length1":16,"length2":94},{"diffs":[[0,"        "],[1,"  "],[1,"  "],[0,"highligh"]],"start1":6622,"start2":6622,"length1":16,"length2":20},{"diffs":[[0,"target);"],[1,"                                        \n                                    }"],[0,"\n       "]],"start1":6655,"start2":6655,"length1":16,"length2":94}]],"length":9338,"saved":false}
{"ts":1364627333719,"patch":[[{"diffs":[[0,"(node){\n"],[1,"                                particleSystem.stop();\n"],[0,"        "]],"start1":6245,"start2":6245,"length1":16,"length2":71},{"diffs":[[0,"edraw();"],[-1," "],[1,"\n                                particleSystem.start();"],[0,"\n       "]],"start1":6869,"start2":6869,"length1":17,"length2":72}]],"length":9448,"saved":false}
{"ts":1364627547384,"patch":[[{"diffs":[[0,"e){\n"],[-1,"                                particleSystem.stop();\n"],[0,"    "]],"start1":6249,"start2":6249,"length1":63,"length2":8},{"diffs":[[0,"   }"],[-1,"highlight(nearest.node);"],[1,"function(){\n                                particleSystem.stop();\n                                highlight(nearest.node);\n                                particleSystem.start();\n                            }"],[0,"\n   "]],"start1":6904,"start2":6904,"length1":32,"length2":217}]],"length":9578,"saved":false}
{"ts":1364627572955,"patch":[[{"diffs":[[0,"function"],[1," startHighlight"],[0,"(){\n    "]],"start1":6908,"start2":6908,"length1":16,"length2":31},{"diffs":[[0,"               }"],[1,"startHighlight();"],[0,"\n               "]],"start1":7116,"start2":7116,"length1":32,"length2":49}]],"length":9610,"saved":false}
{"ts":1364627862772,"patch":[[{"diffs":[[0,"dges"],[-1,"From"],[1,"To"],[0,"(nea"]],"start1":6373,"start2":6373,"length1":12,"length2":10}]],"length":9608,"saved":false}
{"ts":1364628127384,"patch":[[{"diffs":[[0,"ht = 3;\n"],[1,"                                        particleSystem.prune(edges[key]);\n"],[0,"        "]],"start1":6584,"start2":6584,"length1":16,"length2":90}]],"length":9682,"saved":false}
{"ts":1364628273189,"patch":[[{"diffs":[[0," 3;\n"],[-1,"                                        particleSystem.prune(edges[key]);\n"],[0,"    "]],"start1":6588,"start2":6588,"length1":82,"length2":8},{"diffs":[[0,"ight(){\n"],[1,"                                var edges = [];\n"],[0,"        "]],"start1":6925,"start2":6925,"length1":16,"length2":64},{"diffs":[[0,"ghlight("],[1,"null, "],[0,"nearest."]],"start1":7070,"start2":7070,"length1":16,"length2":22}]],"length":9662,"saved":false}
{"ts":1364628360500,"patch":[[{"diffs":[[0,"ght("],[-1,"null, "],[0,"near"]],"start1":7074,"start2":7074,"length1":14,"length2":8}]],"length":9656,"saved":false}
{"ts":1364628456990,"patch":[[{"diffs":[[0,"node, pt) {\n"],[1,"                        node.data.color.a = .1;\n"],[0,"            "]],"start1":947,"start2":947,"length1":24,"length2":72}]],"length":9704,"saved":false}
{"ts":1364628463653,"patch":[[{"diffs":[[0,"lor.a = "],[1,"0"],[0,".1;\n    "]],"start1":995,"start2":995,"length1":16,"length2":17}]],"length":9705,"saved":false}
{"ts":1364628757662,"patch":[[{"diffs":[[0,"var "],[-1,"key in edges"],[1,"x = 0; x< edges.length; x++"],[0,"){\n "]],"start1":6480,"start2":6480,"length1":20,"length2":35},{"diffs":[[0,"   if(edges["],[-1,"key"],[1,"x"],[0,"].data.color"]],"start1":6547,"start2":6547,"length1":27,"length2":25},{"diffs":[[0,"  edges["],[-1,"key"],[1,"x"],[0,"].data.w"]],"start1":6624,"start2":6624,"length1":19,"length2":17},{"diffs":[[0,"ges["],[-1,"key"],[1,"x"],[0,"].ta"]],"start1":6704,"start2":6704,"length1":11,"length2":9}]],"length":9714,"saved":false}
{"ts":1364629062805,"patch":[[{"diffs":[[0,"EdgesTo("],[-1,"nearest."],[0,"node);\n "]],"start1":6421,"start2":6421,"length1":24,"length2":16}]],"length":9706,"saved":false}
{"ts":1364629380260,"patch":[[{"diffs":[[0,"     if("],[1,"!"],[0,"edges[x]"]],"start1":6537,"start2":6537,"length1":16,"length2":17},{"diffs":[[0,"ata."],[-1,"color !== \"none\""],[1,"visited"],[0,"){\n "]],"start1":6556,"start2":6556,"length1":24,"length2":15},{"diffs":[[0,"ht = 3;\n"],[1,"                                        edges[x].data.visited =true;\n"],[0,"        "]],"start1":6628,"start2":6628,"length1":16,"length2":85}]],"length":9767,"saved":false}
{"ts":1364629390052,"patch":[[{"diffs":[[0,"getEdges"],[-1,"To"],[1,"From"],[0,"(node);\n"]],"start1":6418,"start2":6418,"length1":18,"length2":20}]],"length":9769,"saved":false}
{"ts":1364629590416,"patch":[[{"diffs":[[0,") {\n"],[-1,"                        node.data.color.a = 0.1;\n"],[0,"    "]],"start1":955,"start2":955,"length1":57,"length2":8}]],"length":9720,"saved":false}
{"ts":1364629977938,"patch":[[{"diffs":[[0,"].target"],[1,".name"],[0,");      "]],"start1":6715,"start2":6715,"length1":16,"length2":21},{"diffs":[[0,"(){\n"],[-1,"                                var edges = [];\n"],[0,"    "]],"start1":6998,"start2":6998,"length1":56,"length2":8}]],"length":9677,"saved":false}
{"ts":1364630187970,"patch":[[{"diffs":[[0,"    "],[-1,"for(var x = 0; x< edges.length; x++){"],[1,"var interesting; \n                                for(var x = 0; x< edges.length; x++){\n                                    particleSystem.getEdges(node);"],[0,"\n   "]],"start1":6417,"start2":6417,"length1":45,"length2":162},{"diffs":[[0,"].target"],[-1,".name"],[0,");      "]],"start1":6832,"start2":6832,"length1":21,"length2":16}]],"length":9789,"saved":false}
{"ts":1364630209578,"patch":[[{"diffs":[[0,"                "],[1," interesting ="],[0," particleSystem."]],"start1":6528,"start2":6528,"length1":32,"length2":46},{"diffs":[[0,"etEdges(node"],[1,", edges[x].target"],[0,");\n         "]],"start1":6575,"start2":6575,"length1":24,"length2":41}]],"length":9820,"saved":false}
{"ts":1364630477279,"patch":[[{"diffs":[[0,"    "],[-1,"var interesting; \n                                for(var x = 0; x< edges.length; x++){\n                                    interesting = particleSystem.getEdges(node, edges[x].target);"],[1,"for(var x = 0; x< edges.length; x++){"],[0,"\n   "]],"start1":6417,"start2":6417,"length1":193,"length2":45}]],"length":9672,"saved":false}
{"ts":1364634772863,"patch":[[{"diffs":[[0,"+){\n"],[-1,"                                    if(!edges[x].data.visited){\n                                        edges[x].data.weight = 3;\n                                        edges[x].data.visited =true;\n    "],[0,"    "]],"start1":6455,"start2":6455,"length1":211,"length2":8},{"diffs":[[0,"   \n"],[-1,"                                    }\n"],[0,"    "]],"start1":6559,"start2":6559,"length1":46,"length2":8}]],"length":9431,"saved":false}
{"ts":1364634836184,"patch":[[{"diffs":[[0,"   }"],[-1,"function startHighlight(){\n                                particleSystem.stop();\n                                highlight(nearest.node);\n                                particleSystem.start();\n                            }startHighlight();"],[1,"highlight(nearest.node);\n"],[0,"\n   "]],"start1":6725,"start2":6725,"length1":249,"length2":33}]],"length":9215,"saved":false}
{"ts":1364635235155,"patch":[[{"diffs":[[0,"g: function() {\n"],[1,"                var pos, mouseP, nearest, oldNearest;\n"],[0,"                "]],"start1":5577,"start2":5577,"length1":32,"length2":86},{"diffs":[[0,") {\n"],[-1,"                        var pos, mouseP, nearest;\n"],[0,"    "]],"start1":5716,"start2":5716,"length1":58,"length2":8},{"diffs":[[0,"e) {"],[-1,"\n                        var pos, mouseP, nearest;\n"],[0,"    "]],"start1":7029,"start2":7029,"length1":59,"length2":8}]],"length":9168,"saved":false}
{"ts":1364635434412,"patch":[[{"diffs":[[0,"(node){\n"],[1,"                                normalize(oldNearest);\n                                oldNearest = node;\n"],[0,"        "]],"start1":6249,"start2":6249,"length1":16,"length2":122},{"diffs":[[0," = 255;\n"],[-1,""],[0,"        "]],"start1":6412,"start2":6412,"length1":16,"length2":16},{"diffs":[[0,"    "],[-1,"    particleSystem.start("],[1,"}highlight(nearest.node);\n                            \n                            function normalize(node){\n                                node.data.color.a = .5;\n                                var edges = particleSystem.getEdgesFrom(node"],[0,");\n "]],"start1":6778,"start2":6778,"length1":33,"length2":249},{"diffs":[[0,"    "],[1," "],[-1,"}highlight(nearest.node);"],[1,"   for(var x = 0; x< edges.length; x++){\n                                    normalize(edges[x].target);                                        \n                                }\n                                that.redraw();                                \n                            }"],[0,"\n\n  "]],"start1":7050,"start2":7050,"length1":33,"length2":296}]],"length":9753,"saved":false}
{"ts":1364635465641,"patch":[[{"diffs":[[0,"ighlight(node){\n"],[1,"                                particleSystem.stop();\n"],[0,"                "]],"start1":6241,"start2":6241,"length1":32,"length2":87},{"diffs":[[0,"t.redraw();\n"],[1,"                                particleSystem.start();\n"],[0,"            "]],"start1":6797,"start2":6797,"length1":24,"length2":80}]],"length":9864,"saved":false}
{"ts":1364635531206,"patch":[[{"diffs":[[0,"    "],[-1,"normalize(oldNearest);"],[1,"if(oldNearest){\n                                    normalize(oldNearest);\n                                }"],[0,"\n   "]],"start1":6340,"start2":6340,"length1":30,"length2":116}]],"length":9950,"saved":false}
{"ts":1364635705306,"patch":[[{"diffs":[[0,"e){\n"],[-1,"                                particleSystem.stop();\n"],[0,"    "]],"start1":6253,"start2":6253,"length1":63,"length2":8},{"diffs":[[0,"();\n"],[-1,"                                particleSystem.start();\n"],[0,"    "]],"start1":6836,"start2":6836,"length1":64,"length2":8}]],"length":9839,"saved":false}
{"ts":1364636605295,"patch":[[{"diffs":[[0,") {\n"],[-1,"                var pos, mouseP, nearest, oldNearest;\n"],[0,"    "]],"start1":5589,"start2":5589,"length1":62,"length2":8},{"diffs":[[0,"                "],[1,"var pos, mouseP, nearest;"],[0,"\n               "]],"start1":5674,"start2":5674,"length1":32,"length2":57},{"diffs":[[0,"t &&"],[-1," nearest.node.data.label !== \"OR\" && nearest.node.data.label !== \"AND\" &&"],[0," nea"]],"start1":5975,"start2":5975,"length1":81,"length2":8},{"diffs":[[0,"    "],[-1,"$('canvas').css( 'cursor', 'pointer' );\n  "],[1,"mouseEntered();"],[0,"        "],[1,"\n      "],[0,"    "]],"start1":6028,"start2":6028,"length1":58,"length2":38},{"diffs":[[0,"            "],[-1,"\n        "],[1,"}\n\n"],[0,"            "]],"start1":6068,"start2":6068,"length1":33,"length2":27},{"diffs":[[0,"    "],[-1,"function highlight(node){"],[1,"return false;"],[0,"\n   "]],"start1":6099,"start2":6099,"length1":33,"length2":21},{"diffs":[[0,"                "],[1,"},\n"],[0,"            if(o"]],"start1":6121,"start2":6121,"length1":32,"length2":35},{"diffs":[[0,"    "],[-1,"if(oldNearest){\n         "],[1,"        clicked: function(e) {   \n"],[0,"    "]],"start1":6148,"start2":6148,"length1":33,"length2":42},{"diffs":[[0,"    "],[-1,"   normalize(oldN"],[1,"var pos, mouseP, n"],[0,"earest"],[-1,")"],[0,";\n  "]],"start1":6206,"start2":6206,"length1":32,"length2":32},{"diffs":[[0,"    "],[-1,"        }\n                                oldNearest = node;\n                                node.data.color.a = 255;"],[1,"pos = $(canvas).offset();\n                        mouseP = arbor.Point(e.pageX - pos.left, e.pageY - pos.top)"],[0,"\n   "]],"start1":6256,"start2":6256,"length1":125,"length2":117},{"diffs":[[0,"        "],[-1,"        var edg"],[1,"near"],[0,"es"],[1,"t"],[0," = parti"]],"start1":6386,"start2":6386,"length1":33,"length2":23},{"diffs":[[0,"eSystem."],[-1,"getEdgesFrom(node"],[1,"nearest(mouseP"],[0,");\n     "]],"start1":6411,"start2":6411,"length1":33,"length2":30},{"diffs":[[0,"    "],[-1,"        for(var x = 0; x< edges.length; x++){\n                                    highlight(edges[x].target);"],[1,"if( nearest&& nearest.node.data.label !== \"OR\" && nearest.node.data.label !== \"AND\" && nearest.distance < 20 ){\n                            that.customNodeClick.setCourse(nearest.node.name);\n       "],[0,"    "]],"start1":6456,"start2":6456,"length1":117,"length2":206},{"diffs":[[0,"                "],[1,"}\n"],[0,"                "]],"start1":6659,"start2":6659,"length1":32,"length2":34},{"diffs":[[0,"                "],[1," return false;"],[0,"\n               "]],"start1":6684,"start2":6684,"length1":32,"length2":46},{"diffs":[[0,"                "],[1,"},\n"],[0,"            }\n  "]],"start1":6719,"start2":6719,"length1":32,"length2":35},{"diffs":[[0,"    "],[-1,"}\n"],[0,"        "],[-1,"                        that.redraw();\n                            }highlight(nearest.node);"],[1,"mouseEntered: function(){\n                        function highlight(node){\n                        if(nearest.distance > 20){"],[0,"\n   "]],"start1":6746,"start2":6746,"length1":110,"length2":142},{"diffs":[[0,"    "],[-1,"    function normalize(node){\n   "],[1,"}\n"],[0,"    "]],"start1":6934,"start2":6934,"length1":41,"length2":10},{"diffs":[[0,"            "],[-1," "],[0,"node.data.co"]],"start1":6956,"start2":6956,"length1":25,"length2":24},{"diffs":[[0,"a = "],[-1,"."],[1,"25"],[0,"5;\n"],[-1,"    "],[0,"    "]],"start1":6984,"start2":6984,"length1":16,"length2":13},{"diffs":[[0,"        "],[-1,"   "],[-1," "],[0,"for(var "]],"start1":7088,"start2":7088,"length1":20,"length2":16},{"diffs":[[0,"    "],[-1,"    normalize"],[1,"highlight"],[0,"(edg"]],"start1":7162,"start2":7162,"length1":21,"length2":17},{"diffs":[[0,"            "],[-1,"    }\n    "],[1,"}\n"],[0,"            "]],"start1":7250,"start2":7250,"length1":34,"length2":26},{"diffs":[[0,"w();"],[-1,"                                \n                            }\n\n                            return false;\n                        }else{\n                            $('canvas').css( 'cursor', 'default' );\n                            return false;\n                        }\n                    },\n                    clicked: function(e) {                        \n                        pos ="],[1,"\n                        }highlight(nearest.node);\n                        return false; \n                       "],[0," $("],[1,"'"],[0,"canvas"],[1,"'"],[0,")."],[-1,"offset();\n                        mouseP = arbor.Point(e.pageX - pos.left, e.pageY - pos.top)\n                        nearest = particleSystem.nearest(mouseP);\n                        if( nearest&& nearest.node.data.label !== \"OR\" && nearest.node.data.label !== \"AND\" && nearest.distance < 20 ){\n                            that.customNodeClick.setCourse(nearest.node.name);\n                        }\n                        return false;"],[1,"css( 'cursor', 'pointer' );\n                        "],[0,"\n   "]],"start1":7302,"start2":7302,"length1":849,"length2":186}]],"length":9116,"saved":false}
{"ts":1364637002260,"patch":[[{"diffs":[[0,"g: function() {\n"],[1,"                var pos, mouseP, nearest;\n"],[0,"                "]],"start1":5577,"start2":5577,"length1":32,"length2":74},{"diffs":[[0,"    "],[-1,"var pos, mouseP, nearest;"],[0,"\n   "]],"start1":5728,"start2":5728,"length1":33,"length2":8},{"diffs":[[0,"arest &&"],[1," nearest.node.data.label !== \"OR\" && nearest.node.data.label !== \"AND\" &&"],[0," nearest"]],"start1":5988,"start2":5988,"length1":16,"length2":89},{"diffs":[[0,"    "],[-1,"mouseEntered();        "],[1,"$('canvas').css( 'cursor', 'pointer' );"],[0,"\n   "]],"start1":6118,"start2":6118,"length1":31,"length2":47},{"diffs":[[0,"            "],[-1,"       }\n\n"],[0,"            "]],"start1":6167,"start2":6167,"length1":34,"length2":24},{"diffs":[[0,"    "],[-1,"         return false;\n                    },\n                    clicked: function(e) {   \n                        var pos, mouseP, nearest;\n                        pos = $(canvas).offset();\n                        mouseP = arbor.Point(e.pageX - pos.left, e.pageY - pos.top)\n                        near"],[1,"\n                            function highlight(node){\n                                node.data.color.a = 255;\n                                var edg"],[0,"es"],[-1,"t"],[0," = p"]],"start1":6186,"start2":6186,"length1":315,"length2":161},{"diffs":[[0,"ticleSystem."],[-1,"nearest(mouseP"],[1,"getEdgesFrom(node"],[0,");\n         "]],"start1":6349,"start2":6349,"length1":38,"length2":41},{"diffs":[[0,"    "],[-1,"if( nearest&& nearest.node.data.label !== \"OR\" && nearest.node.data.label !== \"AND\" && nearest.distance < 20 ){\n                            that.customNodeClick.setCourse(nearest.node.name);\n   "],[1,"        for(var x = 0; x< edges.length; x++){\n                                    highlight(edges[x].target);"],[0,"    "]],"start1":6401,"start2":6401,"length1":202,"length2":117},{"diffs":[[0,"                "],[-1,"}\n"],[0,"                "]],"start1":6519,"start2":6519,"length1":34,"length2":32},{"diffs":[[0,"        "],[-1,"     return false;"],[0,"\n       "]],"start1":6546,"start2":6546,"length1":34,"length2":16},{"diffs":[[0,"                "],[-1,"},\n"],[0,"                "]],"start1":6559,"start2":6559,"length1":35,"length2":32},{"diffs":[[0,"    "],[1,"}\n"],[0,"        "],[-1,"mouseEntered: function(){\n                        function highlight(node){\n                        if(nearest.distance > 20){"],[1,"                        that.redraw();\n                            }highlight(nearest.node);"],[0,"\n   "]],"start1":6583,"start2":6583,"length1":142,"length2":110},{"diffs":[[0,"                "],[1,"return false;"],[0,"\n               "]],"start1":6702,"start2":6702,"length1":32,"length2":45},{"diffs":[[0,"               }"],[1,"else{"],[0,"\n               "]],"start1":6741,"start2":6741,"length1":32,"length2":37},{"diffs":[[0,"    "],[-1,"node.data.color.a = 255;\n                            var edges = particleSystem.getEdgesFrom(node)"],[1,"$('canvas').css( 'cursor', 'default' );\n                            return false"],[0,";\n  "]],"start1":6787,"start2":6787,"length1":106,"length2":88},{"diffs":[[0,"    "],[1,"}\n"],[0,"    "],[-1,"for(var x = 0; x< edges.length; x++){\n"],[1,"     "],[0,"    "]],"start1":6893,"start2":6893,"length1":50,"length2":19},{"diffs":[[0,"                "],[-1," "],[1,"},\n"],[0,"                "]],"start1":6903,"start2":6903,"length1":33,"length2":35},{"diffs":[[0,"    "],[-1,"highlight(edges[x].target);                                        \n                            }\n                            that.redraw();\n                        }highlight(nearest.node);\n                        return false; \n                        $('canvas').css( 'cursor', 'pointer' );\n"],[1,"clicked: function(e) {                        \n                        pos = $(canvas).offset();\n                        mouseP = arbor.Point(e.pageX - pos.left, e.pageY - pos.top)\n                        nearest = particleSystem.nearest(mouseP);\n                        if( nearest&& nearest.node.data.label !== \"OR\" && nearest.node.data.label !== \"AND\" && nearest.distance < 20 ){\n                            that.customNodeClick.setCourse(nearest.node.name);\n                        }\n  "],[0,"    "]],"start1":6938,"start2":6938,"length1":302,"length2":498},{"diffs":[[0,"                "],[-1,"  "],[1,"return false;"],[0,"\n               "]],"start1":7438,"start2":7438,"length1":34,"length2":45}]],"length":9099,"saved":false}
{"ts":1364637315827,"patch":[[{"diffs":[[0,"         }else{\n"],[1,"                            particleSystem.eachNode(function(note, pt){\n                                node.data.color.a = .5;\n                            });\n"],[0,"                "]],"start1":6747,"start2":6747,"length1":32,"length2":192}]],"length":9259,"saved":false}
{"ts":1364637331570,"patch":[[{"diffs":[[0,"ction(no"],[-1,"t"],[1,"d"],[0,"e, pt){\n"]],"start1":6818,"start2":6818,"length1":17,"length2":17},{"diffs":[[0,"lor.a = "],[1,"0"],[0,".5;\n    "]],"start1":6879,"start2":6879,"length1":16,"length2":17}]],"length":9260,"saved":false}
{"ts":1364637623492,"patch":[[{"diffs":[[0,"a = "],[-1,"255"],[1,"1"],[0,";\n  "]],"start1":6293,"start2":6293,"length1":11,"length2":9}]],"length":9258,"saved":false}
{"ts":1364637632343,"patch":[[{"diffs":[[0,"= 0."],[-1,"5"],[1,"6"],[0,";\n  "]],"start1":6883,"start2":6883,"length1":9,"length2":9}]],"length":9258,"saved":false}
{"ts":1364638030734,"patch":[[{"diffs":[[0,"                "],[1,"particleSystem.stop();"],[0,"\n               "]],"start1":5716,"start2":5716,"length1":32,"length2":54}]],"length":9280,"saved":false}
{"ts":1364638087243,"patch":[[{"diffs":[[0,") {\n"],[-1,"                        particleSystem.stop();\n"],[0,"    "]],"start1":5704,"start2":5704,"length1":55,"length2":8}]],"length":9233,"saved":false}
{"ts":1364638241525,"patch":[[{"diffs":[[0,"; x++){\n"],[1,"                                    edges[x].data.weight=3;\n"],[0,"        "]],"start1":6416,"start2":6416,"length1":16,"length2":76},{"diffs":[[0,"            });\n"],[1,"                            particleSystem.eachEdge(function(edge, pt, pt2){\n                                edge.data.weight = 1;\n                            });\n"],[0,"                "]],"start1":6941,"start2":6941,"length1":32,"length2":195}]],"length":9456,"saved":false}
{"ts":1364638287160,"patch":[[{"diffs":[[0,".weight="],[-1,"3"],[1,"2"],[0,";\n      "]],"start1":6473,"start2":6473,"length1":17,"length2":17}]],"length":9456,"saved":false}
{"ts":1364638342855,"patch":[[{"diffs":[[0,"pointer' );\n"],[1,"                            particleSystem.stop();"],[0,"            "]],"start1":6125,"start2":6125,"length1":24,"length2":74},{"diffs":[[0,"    "],[-1,"}highlight(nearest.node"],[1,"    \n                            }highlight(nearest.node);\n                            particleSystem.start("],[0,");\n "]],"start1":6743,"start2":6743,"length1":31,"length2":116}]],"length":9591,"saved":false}
{"ts":1364638408989,"patch":[[{"diffs":[[0,"default' );\n"],[1,"                            that.redraw();\n"],[0,"            "]],"start1":7311,"start2":7311,"length1":24,"length2":67}]],"length":9634,"saved":false}
{"ts":1364638495034,"patch":[[{"diffs":[[0," );\n"],[-1,"                            particleSystem.stop();                            \n"],[0,"    "]],"start1":6133,"start2":6133,"length1":87,"length2":8},{"diffs":[[0,"e);\n"],[-1,"                            particleSystem.start();\n"],[0,"    "]],"start1":6723,"start2":6723,"length1":60,"length2":8}]],"length":9503,"saved":false}
{"ts":1364638630548,"patch":[[{"diffs":[[0,"pointer' );\n"],[1,"                            if(particleSystem.energy().n<50){\n "],[0,"            "]],"start1":6125,"start2":6125,"length1":24,"length2":87},{"diffs":[[0,"   return false;"],[1,"   \n                            } "],[0,"\n               "]],"start1":6815,"start2":6815,"length1":32,"length2":66}]],"length":9600,"saved":false}
{"ts":1364638649616,"patch":[[{"diffs":[[0,").n<"],[-1,"5"],[1,"3"],[0,"0){\n"]],"start1":6190,"start2":6190,"length1":9,"length2":9}]],"length":9600,"saved":false}
{"ts":1364638680520,"patch":[[{"diffs":[[0,"    "],[-1,"return false;  "],[1,"}"],[0," \n  "]],"start1":6814,"start2":6814,"length1":23,"length2":9},{"diffs":[[0,"                "],[-1,"}"],[1,"return false;  "],[0," \n              "]],"start1":6833,"start2":6833,"length1":33,"length2":47}]],"length":9600,"saved":false}
{"ts":1364638688751,"patch":[[{"diffs":[[0,").n<"],[-1,"30"],[1,"25"],[0,"){\n "]],"start1":6190,"start2":6190,"length1":10,"length2":10}]],"length":9600,"saved":false}
{"ts":1364638777073,"patch":[[{"diffs":[[0,"earest(mouseP);\n"],[1,"\n"],[0,"                "]],"start1":5892,"start2":5892,"length1":32,"length2":33},{"diffs":[[0,"                "],[-1,"\n"],[1,"if(particleSystem.energy().n<25){\n    "],[0,"                "]],"start1":5917,"start2":5917,"length1":33,"length2":70},{"diffs":[[0,"                "],[1,"    "],[0,"$('canvas').css("]],"start1":6119,"start2":6119,"length1":32,"length2":36},{"diffs":[[0,"    "],[-1,"                        if(particleSystem.energy().n<25){\n"],[0,"    "]],"start1":6179,"start2":6179,"length1":66,"length2":8},{"diffs":[[0,"                "],[1,"    "],[0,"node.data.color."]],"start1":6254,"start2":6254,"length1":32,"length2":36},{"diffs":[[0,"olor.a = 1;\n"],[1,"    "],[0,"            "]],"start1":6285,"start2":6285,"length1":24,"length2":28},{"diffs":[[0,"        "],[1,"    "],[0,"for(var "]],"start1":6404,"start2":6404,"length1":16,"length2":20},{"diffs":[[0,"            "],[1,"   "],[1," "],[0,"edges[x].dat"]],"start1":6478,"start2":6478,"length1":24,"length2":28},{"diffs":[[0,"ight=2;\n"],[1,"    "],[0,"        "]],"start1":6510,"start2":6510,"length1":16,"length2":20},{"diffs":[[0,"                "],[1,"  "],[-1,"}\n"],[1,"  }\n    "],[0,"                "]],"start1":6642,"start2":6642,"length1":34,"length2":42},{"diffs":[[0,"                "],[-1,"\n"],[1,"    \n   "],[0,"                "]],"start1":6731,"start2":6731,"length1":33,"length2":40},{"diffs":[[0,"        "],[1," "],[0,"}highlig"]],"start1":6775,"start2":6775,"length1":16,"length2":17},{"diffs":[[0,"                "],[-1,"}"],[1,"    "],[0," \n              "]],"start1":6822,"start2":6822,"length1":33,"length2":36},{"diffs":[[0,"                "],[1," "],[1,"   "],[0,"return false;   "]],"start1":6856,"start2":6856,"length1":32,"length2":36},{"diffs":[[0,"n false;   \n"],[1,"    "],[0,"            "]],"start1":6881,"start2":6881,"length1":24,"length2":28},{"diffs":[[0,"                "],[1,"    "],[0,"particleSystem.e"]],"start1":6940,"start2":6940,"length1":32,"length2":36},{"diffs":[[0,"e, pt){\n"],[1,"    "],[0,"        "]],"start1":6996,"start2":6996,"length1":16,"length2":20},{"diffs":[[0,"                "],[1,"    "],[0,"});\n            "]],"start1":7077,"start2":7077,"length1":32,"length2":36},{"diffs":[[0,"                "],[1," "],[1,"   "],[0,"particleSystem.e"]],"start1":7113,"start2":7113,"length1":32,"length2":36},{"diffs":[[0,", pt2){\n"],[1,"    "],[0,"        "]],"start1":7174,"start2":7174,"length1":16,"length2":20},{"diffs":[[0,"                "],[1,"    "],[0,"});\n            "]],"start1":7252,"start2":7252,"length1":32,"length2":36},{"diffs":[[0,"                "],[1,"   "],[1," "],[0,"$('canvas').css("]],"start1":7288,"start2":7288,"length1":32,"length2":36},{"diffs":[[0,"default' );\n"],[1,"    "],[0,"            "]],"start1":7336,"start2":7336,"length1":24,"length2":28},{"diffs":[[0,"                "],[1,"    "],[0,"return false;\n  "]],"start1":7407,"start2":7407,"length1":32,"length2":36},{"diffs":[[0,"  return false;\n"],[1,"                            }\n"],[0,"                "]],"start1":7425,"start2":7425,"length1":32,"length2":62}]],"length":9697,"saved":false}
{"ts":1364638791511,"patch":[[{"diffs":[[0,"              }\n"],[1,"                        return false;\n"],[0,"                "]],"start1":7481,"start2":7481,"length1":32,"length2":70}]],"length":9735,"saved":false}
{"ts":1364638813283,"patch":[[{"diffs":[[0,"e);\n"],[-1,"                                 \n                                return false;   \n"],[0,"    "]],"start1":6806,"start2":6806,"length1":91,"length2":8},{"diffs":[[0,"();\n"],[-1,"                                return false;\n"],[0,"    "]],"start1":7308,"start2":7308,"length1":54,"length2":8}]],"length":9606,"saved":false}
{"ts":1364638854190,"patch":[[{"diffs":[[0,"rgy().n<"],[-1,"2"],[1,"3"],[0,"5){\n    "]],"start1":5954,"start2":5954,"length1":17,"length2":17}]],"length":9606,"saved":false}
{"ts":1364638884644,"patch":[[{"diffs":[[0,".n<3"],[-1,"5"],[1,"0"],[0,"){\n "]],"start1":5959,"start2":5959,"length1":9,"length2":9}]],"length":9606,"saved":false}
{"ts":1364638906116,"patch":[[{"diffs":[[0,").n<"],[-1,"30"],[1,"25"],[0,"){\n "]],"start1":5958,"start2":5958,"length1":10,"length2":10}]],"length":9606,"saved":false}
{"ts":1364638932583,"patch":[[{"diffs":[[0,".n<2"],[-1,"5"],[1,"8"],[0,"){\n "]],"start1":5959,"start2":5959,"length1":9,"length2":9}]],"length":9606,"saved":false}
{"ts":1364638963173,"patch":[[{"diffs":[[0,"gy().n<2"],[-1,"8"],[1,"6"],[0,"){\n     "]],"start1":5955,"start2":5955,"length1":17,"length2":17}]],"length":9606,"saved":false}
{"ts":1364638985305,"patch":[[{"diffs":[[0,"gy().n<2"],[-1,"6"],[1,"7"],[0,"){\n     "]],"start1":5955,"start2":5955,"length1":17,"length2":17}]],"length":9606,"saved":false}
{"ts":1364670628274,"patch":[[{"diffs":[[0,"+){\n"],[-1,"                                        edges[x].data.weight=2;\n"],[0,"    "]],"start1":6450,"start2":6450,"length1":72,"length2":8},{"diffs":[[0,"});\n"],[-1,"                                particleSystem.eachEdge(function(edge, pt, pt2){\n                                    edge.data.weight = 1;\n                                });"],[0,"\n   "]],"start1":6950,"start2":6950,"length1":182,"length2":8}]],"length":9368,"saved":false}
{"ts":1364673634780,"patch":[[{"diffs":[[0,").n<"],[-1,"27"],[1,"35"],[0,"){\n "]],"start1":5958,"start2":5958,"length1":10,"length2":10}]],"length":9368,"saved":false}
{"ts":1364674110401,"patch":[[{"diffs":[[0,"        "],[-1,"color"],[1,"var c"],[0," = edge."]],"start1":3238,"start2":3238,"length1":21,"length2":21},{"diffs":[[0,".color;\n"],[1,"                    var a = c.a? c.a : 1;\n                    color = \"rgba(\"+c.r+\",\"+c.g+\",\"+c.b+\",\"+a+\")\";\n                    "],[0,"\n       "]],"start1":3263,"start2":3263,"length1":16,"length2":145}]],"length":9497,"saved":false}
{"ts":1364674203954,"patch":[[{"diffs":[[0,"target);"],[1,"\n"],[0,"        "]],"start1":6642,"start2":6642,"length1":16,"length2":17},{"diffs":[[0,"                "],[1,"edges[x].data.color.a = 1;"],[0,"\n               "]],"start1":6675,"start2":6675,"length1":32,"length2":58},{"diffs":[[0,"             });"],[1,"\n                                \n                                particleSystem.eachEdge(function(edge, pt1, pt2){\n                                    edge.data.color.a = 0.6;\n                                });"],[0,"\n\n              "]],"start1":7093,"start2":7093,"length1":32,"length2":244}]],"length":9736,"saved":false}
{"ts":1364674212852,"patch":[[{"diffs":[[0,"ata.color.a = 0."],[-1,"6"],[1,"4"],[0,";\n              "]],"start1":7267,"start2":7267,"length1":33,"length2":33}]],"length":9736,"saved":false}
{"ts":1364674267212,"patch":[[{"diffs":[[0,"r.a = 0."],[-1,"4"],[1,"2"],[0,";\n      "]],"start1":7275,"start2":7275,"length1":17,"length2":17}]],"length":9736,"saved":false}
{"ts":1364678530914,"patch":[[{"diffs":[[0,".n<35){\n"],[1,"                            particleSystem.stop();\n"],[0,"        "]],"start1":6088,"start2":6088,"length1":16,"length2":67},{"diffs":[[0,"              }\n"],[1,"                            particleSystem.start();\n"],[0,"                "]],"start1":7507,"start2":7507,"length1":32,"length2":84}]],"length":9839,"saved":false}
{"ts":1364678603628,"patch":[[{"diffs":[[0,"5){\n"],[-1,"                            particleSystem.stop();\n"],[0,"    "]],"start1":6092,"start2":6092,"length1":59,"length2":8},{"diffs":[[0,"(node){\n"],[1,"                                    particleSystem.stop();\n"],[0,"        "]],"start1":6359,"start2":6359,"length1":16,"length2":75}]],"length":9847,"saved":false}
{"ts":1364678677812,"patch":[[{"diffs":[[0,");\n\n"],[-1,"                        if(particleSystem.energy().n<35){\n"],[0,"    "]],"start1":6034,"start2":6034,"length1":66,"length2":8},{"diffs":[[0," that.redraw();\n"],[1,"                                    particleSystem.start();\n"],[0,"                "]],"start1":6792,"start2":6792,"length1":32,"length2":92},{"diffs":[[0,"  }\n"],[-1,"                            particleSystem.start();\n                        }\n"],[0,"    "]],"start1":7529,"start2":7529,"length1":86,"length2":8}]],"length":9771,"saved":false}
{"ts":1364678852921,"patch":[[{"diffs":[[0,"e){\n"],[-1,"                                    particleSystem.stop();\n"],[0,"    "]],"start1":6305,"start2":6305,"length1":67,"length2":8},{"diffs":[[0,"w();"],[-1,"\n                                    particleSystem.start();\n"],[0,"    "]],"start1":6744,"start2":6744,"length1":69,"length2":8}]],"length":9651,"saved":false}
{"ts":1364678949169,"patch":[[{"diffs":[[0,"  }\n"],[-1,"                                    that.redraw();                                    \n"],[0,"    "]],"start1":6694,"start2":6694,"length1":95,"length2":8},{"diffs":[[0,"    "],[-1,"    that.redraw();"],[1,"}\n                            \n                            if(particleSystem.energy().mean < 35){\n                                that.redraw();                                    "],[0,"\n   "]],"start1":7273,"start2":7273,"length1":26,"length2":188},{"diffs":[[0,"              }\n"],[1,"\n"],[0,"                "]],"start1":7472,"start2":7472,"length1":32,"length2":33}]],"length":9727,"saved":false}
{"ts":1364681280562,"patch":[[{"diffs":[[0,"            "],[1," //"],[0," if(particle"]],"start1":7323,"start2":7323,"length1":24,"length2":27},{"diffs":[[0,"                "],[1," //"],[0,"     that.redraw"]],"start1":7389,"start2":7389,"length1":32,"length2":35},{"diffs":[[0,"                "],[1," //"],[0," }\n\n            "]],"start1":7475,"start2":7475,"length1":32,"length2":35}]],"length":9736,"saved":false}
{"ts":1364681313262,"patch":[[{"diffs":[[0,"        "],[-1," //"],[0," if(part"]],"start1":7327,"start2":7327,"length1":19,"length2":16},{"diffs":[[0,"        "],[-1," //"],[0,"     tha"]],"start1":7394,"start2":7394,"length1":19,"length2":16},{"diffs":[[0,"        "],[-1," //"],[0," }\n\n    "]],"start1":7477,"start2":7477,"length1":19,"length2":16}]],"length":9727,"saved":false}
{"ts":1364681334861,"patch":[[{"diffs":[[0,"                "],[1,"console.log(particleSystem.energy().mean);"],[0,"\n               "]],"start1":7291,"start2":7291,"length1":32,"length2":74}]],"length":9769,"saved":false}
{"ts":1364681394508,"patch":[[{"diffs":[[0,"n < "],[-1,"35"],[1,"1.01"],[0,"){\n "]],"start1":7408,"start2":7408,"length1":10,"length2":12}]],"length":9771,"saved":false}
{"ts":1364681435847,"patch":[[{"diffs":[[0,".mean < "],[-1,"1"],[1,"0"],[0,".01){\n  "]],"start1":7404,"start2":7404,"length1":17,"length2":17}]],"length":9771,"saved":false}
{"ts":1364681468261,"patch":[[{"diffs":[[0,"an < 0.0"],[-1,"1"],[1,"2"],[0,"){\n     "]],"start1":7407,"start2":7407,"length1":17,"length2":17}]],"length":9771,"saved":false}
